{"version":3,"sources":["../package.json","../src/dotlottie-player.ts"],"names":["package_default","PlayerEvents","PlayerState","PlayMode","DEFAULT_OPTIONS","DEFAULT_STATE","DotLottieCommonPlayer","Store","DotLottieLoader","src","container","options","deepCloneLottieJson","rendererSettings","optionsRest","_a","_b","_c","_d","onEnter","onLeave","option","activeAnim","animation","allOptions","key","getOptions","PlaybackOptionsSchema","logWarning","manifestAnimation","id","rest","state","srcParsed","hover","intermission","mode","value","isFrame","name","frameValue","matches","nextFrame","num1","num2","segments","threshold","positionCallback","start","end","firstThreshold","lastThreshold","logError","height","top","current","max","positionInViewport","res","scrollOptions","createError","observerOptions","intersectionObserverCallback","entries","entry","onShowOptions","visibilityPercentage","validatedOptions","activeAnimation","anim","segment","force","animByIndex","animById","stateId","loadStateMachines","activeId","currentIndex","nextAnim","instance","cb","error","_e","_f","_g","direction","speed","color","playbackKeys","revertOptions","shouldRender","activeAnimationId","lastFrame","newDirection","startFrame","callbacks","animationId","lottieContainsAudio","DotLottieAudio","assetPath","audioInstance","_h","_i","_j","_k","_l","_m","_n","_o","_p","_q","_r","loop","autoplay","defaultTheme","lottieStyleSheet","lottiePlayer","audioFactory","applyLottieStyleSheet","renderer","LottieWebModule","manifest","playbackOptions","isValidLottieString","validLottieJson","url","isValidLottieJSON","msg","background"],"mappings":"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","sourcesContent":["{\n  \"name\": \"@dotlottie/common\",\n  \"version\": \"0.7.9\",\n  \"type\": \"module\",\n  \"description\": \"\",\n  \"author\": \"Afsal <afsal@lottiefiles.com>, Sam Osborne <sam@lottiefiles.com>\",\n  \"license\": \"MIT\",\n  \"engines\": {\n    \"node\": \">18.0.0\"\n  },\n  \"module\": \"dist/index.js\",\n  \"main\": \"dist/index.js\",\n  \"types\": \"dist/index.d.ts\",\n  \"files\": [\n    \"dist\"\n  ],\n  \"keywords\": [],\n  \"scripts\": {\n    \"build\": \"tsup\",\n    \"dev\": \"tsup --watch\",\n    \"lint\": \"eslint .\",\n    \"type-check\": \"tsc --noEmit\"\n  },\n  \"dependencies\": {\n    \"@dotlottie/dotlottie-js\": \"^0.6.2\",\n    \"@lottiefiles/relottie\": \"1.0.0\",\n    \"@lottiefiles/relottie-style\": \"0.4.3\",\n    \"@preact/signals-core\": \"^1.2.3\",\n    \"howler\": \"^2.2.3\",\n    \"lottie-web\": \"^5.12.2\",\n    \"xstate\": \"^4.38.1\"\n  },\n  \"devDependencies\": {\n    \"@lottiefiles/lottie-types\": \"^1.2.0\",\n    \"@types/howler\": \"^2.2.8\",\n    \"tsup\": \"^7.2.0\",\n    \"typescript\": \"^4.7.4\"\n  },\n  \"publishConfig\": {\n    \"access\": \"public\"\n  }\n}\n","/**\n * Copyright 2023 Design Barn Inc.\n */\n\nimport {\n  type Manifest,\n  type ManifestAnimation,\n  type PlaybackOptions,\n  PlaybackOptionsSchema,\n} from '@dotlottie/dotlottie-js';\nimport type { Animation } from '@lottiefiles/lottie-types';\nimport type {\n  AnimationConfig,\n  AnimationDirection,\n  AnimationItem,\n  AnimationEventName,\n  RendererType,\n  SVGRendererConfig,\n  HTMLRendererConfig,\n  CanvasRendererConfig,\n  LottiePlayer,\n  AnimationSegment,\n} from 'lottie-web';\n\nimport pkg from '../package.json';\n\nimport type { DotLottieAudio } from './dotlottie-audio';\nimport { DotLottieLoader } from './dotlottie-loader';\nimport { loadStateMachines } from './dotlottie-state-machine-loader';\nimport { applyLottieStyleSheet } from './dotlottie-styler';\nimport type { DotLottieStateMachineManager } from './state/dotlottie-state-machine-manager';\nimport { Store } from './store';\nimport {\n  createError,\n  deepCloneLottieJson,\n  isValidLottieJSON,\n  isValidLottieString,\n  logError,\n  logWarning,\n  lottieContainsAudio,\n} from './utils';\n\nexport type { AnimationDirection, AnimationItem, AnimationSegment };\n\nexport enum PlayerEvents {\n  Complete = 'complete',\n  DataFail = 'data_fail',\n  DataReady = 'data_ready',\n  Error = 'error',\n  Frame = 'frame',\n  Freeze = 'freeze',\n  LoopComplete = 'loopComplete',\n  Pause = 'pause',\n  Play = 'play',\n  Ready = 'ready',\n  Stop = 'stop',\n  VisibilityChange = 'visibilityChange',\n}\nexport enum PlayerState {\n  Completed = 'completed',\n  Error = 'error',\n  Fetching = 'fetching',\n  Frozen = 'frozen',\n  Initial = 'initial',\n  Loading = 'loading',\n  Paused = 'paused',\n  Playing = 'playing',\n  Ready = 'ready',\n  Stopped = 'stopped',\n}\n\nexport enum PlayMode {\n  Bounce = 'bounce',\n  Normal = 'normal',\n}\n\nexport { ManifestTheme, ManifestAnimation, Manifest, PlaybackOptions } from '@dotlottie/dotlottie-js';\n\nexport interface DotLottieElement extends HTMLDivElement {\n  __lottie?: AnimationItem | null;\n}\n\nexport const DEFAULT_OPTIONS: PlaybackOptions = {\n  autoplay: false,\n  direction: 1,\n  hover: false,\n  intermission: 0,\n  loop: false,\n  playMode: PlayMode.Normal,\n  speed: 1,\n  defaultTheme: '',\n};\n\nexport type { RendererType };\nexport type RendererSettings = SVGRendererConfig & CanvasRendererConfig & HTMLRendererConfig;\nexport type DotLottieConfig<T extends RendererType> = Omit<AnimationConfig<T>, 'container'> &\n  PlaybackOptions & {\n    activeAnimationId?: string | null;\n    activeStateId?: string;\n    background?: string;\n    light?: boolean;\n    testId?: string | undefined;\n    worker?: boolean;\n  };\n\ndeclare global {\n  interface Window {\n    dotLottiePlayer: Record<string, Record<string, unknown>>;\n  }\n}\n\nexport interface DotLottiePlayerState extends PlaybackOptions {\n  activeStateId: string | undefined;\n  background: string;\n  currentAnimationId: string | undefined;\n  currentState: PlayerState;\n  frame: number;\n  intermission: number;\n  seeker: number;\n  visibilityPercentage: number;\n}\n\nexport const DEFAULT_STATE: DotLottiePlayerState = {\n  activeStateId: '',\n  autoplay: false,\n  currentState: PlayerState.Initial,\n  frame: 0,\n  seeker: 0,\n  direction: 1,\n  hover: false,\n  loop: false,\n  playMode: PlayMode.Normal,\n  speed: 1,\n  background: 'transparent',\n  intermission: 0,\n  currentAnimationId: undefined,\n  visibilityPercentage: 0,\n};\n\nexport class DotLottieCommonPlayer {\n  protected _lottie: AnimationItem | undefined;\n\n  protected _src: string | Record<string, unknown>;\n\n  protected _animationConfig: Omit<AnimationConfig<RendererType>, 'container'>;\n\n  // This variable holds the playbackOptions prior to interactivity mode.\n  protected _prevUserPlaybackOptions: PlaybackOptions = {};\n\n  // This holds the user set values from the player.\n  protected _userPlaybackOptions: PlaybackOptions;\n\n  protected _hover: boolean = false;\n\n  protected _loop: boolean | number = false;\n\n  protected _counter: number = 0;\n\n  protected _intermission: number = 0;\n\n  protected _counterInterval: number | null = null;\n\n  protected _container: DotLottieElement | null = null;\n\n  protected _name?: string;\n\n  protected _mode: PlayMode = PlayMode.Normal;\n\n  protected _background: string = 'transparent';\n\n  protected _animation: Animation | undefined;\n\n  protected _defaultTheme: string;\n\n  // The active animation id (animation to play first) from the manifest\n  protected _activeAnimationId?: string | undefined;\n\n  // The currently playing animation id\n  protected _currentAnimationId?: string | undefined;\n\n  protected _testId?: string;\n\n  protected _listeners = new Map<AnimationEventName, Set<() => void>>();\n\n  protected _currentState = PlayerState.Initial;\n\n  protected _stateBeforeFreeze = PlayerState.Initial;\n\n  public state = new Store<DotLottiePlayerState>(DEFAULT_STATE);\n\n  private readonly _light: boolean = false;\n\n  private readonly _worker: boolean = false;\n\n  private readonly _dotLottieLoader: DotLottieLoader = new DotLottieLoader();\n\n  protected _activeStateId?: string;\n\n  protected _inInteractiveMode: boolean = false;\n\n  private _scrollTicking: boolean = false;\n\n  private _scrollCallback: (() => void) | undefined = undefined;\n\n  private _onShowIntersectionObserver: IntersectionObserver | undefined = undefined;\n\n  private _visibilityPercentage: number = 0;\n\n  private _audios: DotLottieAudio[] = [];\n\n  protected _stateMachineManager?: DotLottieStateMachineManager;\n\n  public constructor(\n    src: string | Record<string, unknown>,\n    container?: DotLottieElement | null,\n    options?: DotLottieConfig<RendererType>,\n  ) {\n    if (typeof src === 'string') {\n      this._src = src;\n    } else {\n      this._src = deepCloneLottieJson(src);\n    }\n\n    if (options?.testId) {\n      this._testId = options.testId;\n    }\n\n    this._defaultTheme = options?.defaultTheme || '';\n\n    // Filter out the playback options\n    this._userPlaybackOptions = this._validatePlaybackOptions(options || {});\n\n    // Set the active animation id (animation to play first)\n    if (typeof options?.activeAnimationId === 'string') {\n      this._activeAnimationId = options.activeAnimationId;\n    }\n\n    this._container = container || null;\n\n    if (typeof options?.background === 'string') {\n      this.setBackground(options.background);\n    }\n\n    if (typeof options?.activeStateId !== 'undefined') {\n      this._activeStateId = options.activeStateId;\n    }\n\n    const { rendererSettings, ...optionsRest } = options || {};\n\n    this._animationConfig = {\n      loop: false,\n      autoplay: false,\n      renderer: 'svg',\n      rendererSettings: {\n        clearCanvas: true,\n        progressiveLoad: true,\n        hideOnTransparent: true,\n        filterSize: {\n          width: '200%',\n          height: '200%',\n          x: '-50%',\n          y: '-50%',\n        },\n        ...rendererSettings,\n      },\n      ...optionsRest,\n    };\n\n    if (options?.light) {\n      this._light = options.light;\n    }\n\n    if (options?.worker) {\n      this._worker = options.worker;\n    }\n\n    this._listenToHover();\n    this._listenToVisibilityChange();\n  }\n\n  protected _listenToHover(): void {\n    const onEnter = (): void => {\n      if (this._hover && this.currentState !== PlayerState.Playing) {\n        this.play();\n      }\n    };\n    const onLeave = (): void => {\n      if (this._hover && this.currentState === PlayerState.Playing) {\n        this.stop();\n      }\n    };\n\n    this._container?.removeEventListener('mouseenter', onEnter);\n    this._container?.removeEventListener('mouseleave', onLeave);\n\n    this._container?.addEventListener('mouseleave', onLeave);\n    this._container?.addEventListener('mouseenter', onEnter);\n  }\n\n  protected _onVisibilityChange(): void {\n    if (!this._lottie || typeof document === 'undefined') return;\n\n    if (document.hidden && this.currentState === PlayerState.Playing) {\n      this.freeze();\n    } else if (this.currentState === PlayerState.Frozen) {\n      this.unfreeze();\n    }\n  }\n\n  protected _listenToVisibilityChange(): void {\n    if (typeof document !== 'undefined' && typeof document.hidden !== 'undefined') {\n      document.addEventListener('visibilitychange', () => this._onVisibilityChange());\n    }\n  }\n\n  /**\n   * Retrieves a specific playback option.\n   *\n   * @remarks\n   * It grabs option in the following order.\n   * 1. From this._playbackOptions (i.e user specified options) if available\n   * 2. From Manifest if available\n   * 3. Otherwise Default\n   *\n   * @param option - The option key to retrieve.\n   * @returns The value of the specified playback option.\n   */\n  protected _getOption<T extends keyof Required<PlaybackOptions>, V extends Required<PlaybackOptions>[T]>(\n    option: T,\n  ): V {\n    // Options from props\n    if (typeof this._userPlaybackOptions[option] !== 'undefined') {\n      return this._userPlaybackOptions[option] as V;\n    }\n    // Option from manifest\n    const activeAnim = this._dotLottieLoader.manifest?.animations.find(\n      (animation) => animation.id === this._currentAnimationId,\n    );\n\n    if (activeAnim && typeof activeAnim[option] !== 'undefined') {\n      return activeAnim[option] as unknown as V;\n    }\n\n    // Option from defaults\n    return DEFAULT_OPTIONS[option] as V;\n  }\n\n  /**\n   * Retrieves all playback options.\n   *\n   * @see _getOption() function for more context on how it retrieves options\n   *\n   * @returns An object containing all playback options.\n   */\n  protected _getPlaybackOptions<K extends keyof PlaybackOptions, V extends PlaybackOptions[K]>(): PlaybackOptions {\n    const allOptions: PlaybackOptions = {};\n\n    for (const key in DEFAULT_OPTIONS) {\n      if (typeof DEFAULT_OPTIONS[key as K] !== 'undefined') {\n        allOptions[key as K] = this._getOption(key as K) as V;\n      }\n    }\n\n    return allOptions;\n  }\n\n  /**\n   * Update playbackOptions for lottie-web and local\n   */\n  protected _setPlayerState(getOptions: (currPlaybackOptions: PlaybackOptions) => PlaybackOptions): void {\n    const options = getOptions(this._getPlaybackOptions());\n\n    try {\n      PlaybackOptionsSchema._parse(options);\n    } catch (error) {\n      logWarning(`Invalid PlaybackOptions, ${JSON.stringify(options, null, 2)}`);\n\n      return;\n    }\n\n    // Local updates\n    if (typeof options.defaultTheme !== 'undefined') {\n      this._defaultTheme = options.defaultTheme;\n    }\n\n    if (typeof options.playMode !== 'undefined') {\n      this._mode = options.playMode;\n    }\n\n    if (typeof options.intermission !== 'undefined') {\n      this._intermission = options.intermission;\n    }\n\n    if (typeof options.hover !== 'undefined') {\n      this._hover = options.hover;\n    }\n\n    // lottie-web updates\n    if (typeof options.loop !== 'undefined') {\n      this.clearCountTimer();\n      this._loop = options.loop;\n      this._counter = 0;\n      this._lottie?.setLoop(typeof options.loop === 'number' ? true : options.loop);\n    }\n\n    if (typeof options.speed !== 'undefined') {\n      this._lottie?.setSpeed(options.speed);\n    }\n\n    if (typeof options.autoplay !== 'undefined' && this._lottie) {\n      this._lottie.autoplay = options.autoplay;\n    }\n\n    if (typeof options.direction !== 'undefined') {\n      this._lottie?.setDirection(options.direction);\n    }\n  }\n\n  /**\n   * Extracts playback options from a manifest animation, combining them with default options.\n   *\n   * @param manifestAnimation - The animation object from the manifest.\n   * @returns A playback options object derived from the manifest animation and default options.\n   */\n  protected _getOptionsFromAnimation(manifestAnimation: ManifestAnimation): PlaybackOptions {\n    const { id, ...rest } = manifestAnimation;\n\n    return {\n      ...DEFAULT_OPTIONS,\n      ...rest,\n    };\n  }\n\n  protected _updateTestData(): void {\n    if (!this._testId || !this._lottie) return;\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (!window.dotLottiePlayer) {\n      window.dotLottiePlayer = {\n        [this._testId]: {},\n      };\n    }\n    window.dotLottiePlayer[this._testId] = {\n      direction: this._lottie.playDirection,\n      currentState: this._currentState,\n      loop: this.loop,\n      mode: this._mode,\n      speed: this._lottie.playSpeed,\n    };\n  }\n\n  public setContainer(container: DotLottieElement): void {\n    if (container !== this._container) {\n      this._container = container;\n      this.setBackground(this._background);\n      this._listenToHover();\n    }\n  }\n\n  /**\n   * Gets the current player state.\n   *\n   * @returns The current state of the player.\n   */\n  public get currentState(): PlayerState {\n    return this._currentState;\n  }\n\n  protected clearCountTimer(): void {\n    if (this._counterInterval) {\n      clearInterval(this._counterInterval);\n    }\n  }\n\n  protected setCurrentState(state: PlayerState): void {\n    this._currentState = state;\n    this._notify();\n    this._updateTestData();\n  }\n\n  public static isPathJSON(srcParsed: string): boolean {\n    return srcParsed.split('.').pop()?.toLowerCase() === 'json';\n  }\n\n  public get src(): Record<string, unknown> | string {\n    return this._src;\n  }\n\n  public updateSrc(src: Record<string, unknown> | string): void {\n    if (this._src === src) return;\n\n    if (typeof src === 'string') {\n      this._src = src;\n    } else {\n      this._src = deepCloneLottieJson(src);\n    }\n\n    this._activeAnimationId = undefined;\n    this._currentAnimationId = undefined;\n    this.load();\n  }\n\n  public get intermission(): number {\n    return this._intermission;\n  }\n\n  public get hover(): boolean {\n    return this._hover;\n  }\n\n  public setHover(hover: boolean): void {\n    if (typeof hover !== 'boolean') return;\n    this._hover = hover;\n    this._userPlaybackOptions.hover = hover;\n    this._notify();\n  }\n\n  public setIntermission(intermission: number): void {\n    this._intermission = intermission;\n    this._userPlaybackOptions.intermission = intermission;\n    this._notify();\n  }\n\n  public get mode(): PlayMode {\n    return this._mode;\n  }\n\n  public get animations(): Map<string, Animation> {\n    return this._dotLottieLoader.animationsMap;\n  }\n\n  public get themes(): Map<string, string> {\n    return this._dotLottieLoader.themeMap;\n  }\n\n  public setMode(mode: PlayMode): void {\n    if (typeof mode !== 'string') return;\n    this._mode = mode;\n    this._userPlaybackOptions.playMode = mode;\n    this._setPlayerState(() => ({ playMode: mode }));\n    this._notify();\n    this._updateTestData();\n  }\n\n  public get container(): HTMLDivElement | undefined {\n    if (this._container) {\n      return this._container as HTMLDivElement;\n    }\n\n    return undefined;\n  }\n\n  public goToAndPlay(value: number | string, isFrame?: boolean, name?: string): void {\n    if (!this._lottie || [PlayerState.Loading].includes(this._currentState)) {\n      logWarning(\"goToAndPlay() Can't use whilst loading.\");\n\n      return;\n    }\n    this._lottie.goToAndPlay(value, isFrame, name);\n    this.setCurrentState(PlayerState.Playing);\n  }\n\n  public goToAndStop(value: number | string, isFrame?: boolean, name?: string): void {\n    if (!this._lottie || [PlayerState.Loading].includes(this._currentState)) {\n      logWarning(\"goToAndStop() Can't use whilst loading.\");\n\n      return;\n    }\n\n    this._lottie.goToAndStop(value, isFrame, name);\n    this.setCurrentState(PlayerState.Stopped);\n  }\n\n  public seek(value: number | string): void {\n    if (!this._lottie || [PlayerState.Loading].includes(this._currentState)) {\n      logWarning(\"seek() Can't use whilst loading.\");\n\n      return;\n    }\n\n    let frameValue = value;\n\n    if (typeof frameValue === 'number') {\n      frameValue = Math.round(frameValue);\n    }\n\n    // Extract frame number from either number or percentage value\n    const matches = /^(\\d+)(%?)$/u.exec(frameValue.toString());\n\n    if (!matches) {\n      return;\n    }\n\n    // Calculate and set the frame number\n    const nextFrame = matches[2] === '%' ? (this.totalFrames * Number(matches[1])) / 100 : matches[1];\n\n    // Set seeker to new frame number\n    if (nextFrame === undefined) return;\n    // Send lottie player to the new frame\n    this._lottie.goToAndPlay(nextFrame, true);\n    if (this.currentState === PlayerState.Playing) {\n      this.play();\n    } else if (this.currentState === PlayerState.Frozen) {\n      this.freeze();\n    } else {\n      this.pause();\n    }\n  }\n\n  private _areNumbersInRange(num1: number, num2: number): boolean {\n    return num1 >= 0 && num1 <= 1 && num2 >= 0 && num2 <= 1;\n  }\n\n  private _updatePosition(\n    segments?: [number, number],\n    threshold?: [number, number],\n    positionCallback?: (position: number) => void,\n  ): void {\n    const [start, end] = segments ?? [0, this.totalFrames - 1];\n    const [firstThreshold, lastThreshold] = threshold ?? [0, 1];\n\n    if (!this._areNumbersInRange(firstThreshold, lastThreshold)) {\n      logError('threshold values must be between 0 and 1');\n\n      return;\n    }\n\n    if (this.container) {\n      const { height, top } = this.container.getBoundingClientRect();\n\n      // Calculate current view percentage\n      const current = window.innerHeight - top;\n      const max = window.innerHeight + height;\n\n      const positionInViewport = current / max;\n\n      const res =\n        start + Math.round(((positionInViewport - firstThreshold) / (lastThreshold - firstThreshold)) * (end - start));\n\n      if (positionCallback) positionCallback(positionInViewport);\n\n      this.goToAndStop(res, true);\n\n      /**\n       * If we've reached the end of the animation / segments\n       * or if the animation is out of view with thresholds, we fire the complete event\n       */\n      // if (res <= start || res >= end || positionInViewport >= lastThreshold || positionInViewport <= firstThreshold) {\n      if (res >= end || positionInViewport >= lastThreshold) {\n        this._handleAnimationComplete();\n      }\n    }\n\n    this._scrollTicking = false;\n  }\n\n  private _requestTick(\n    segments?: [number, number],\n    threshold?: [number, number],\n    positionCallback?: (position: number) => void,\n  ): void {\n    if (!this._scrollTicking) {\n      requestAnimationFrame(() => this._updatePosition(segments, threshold, positionCallback));\n      this._scrollTicking = true;\n    }\n  }\n\n  public playOnScroll(scrollOptions?: {\n    positionCallback?: (position: number) => void;\n    segments?: [number, number];\n    threshold?: [number, number];\n  }): void {\n    this.stop();\n\n    if (this._scrollCallback) this.stopPlayOnScroll();\n\n    this._scrollCallback = (): void =>\n      this._requestTick(scrollOptions?.segments, scrollOptions?.threshold, scrollOptions?.positionCallback);\n\n    window.addEventListener('scroll', this._scrollCallback);\n  }\n\n  public stopPlayOnScroll(): void {\n    if (this._scrollCallback) {\n      window.removeEventListener('scroll', this._scrollCallback);\n\n      this._scrollCallback = undefined;\n    }\n  }\n\n  public stopPlayOnShow(): void {\n    if (this._onShowIntersectionObserver) {\n      this._onShowIntersectionObserver.disconnect();\n      this._onShowIntersectionObserver = undefined;\n    }\n  }\n\n  public addIntersectionObserver(options?: {\n    callbackOnIntersect?: (visibilityPercentage: number) => void;\n    threshold?: number[];\n  }): void {\n    if (!this.container) {\n      throw createError(\"Can't play on show, player container element not available.\");\n    }\n\n    const observerOptions = {\n      root: null,\n      rootMargin: '0px',\n      threshold: options?.threshold ? options.threshold : [0, 1],\n    };\n\n    const intersectionObserverCallback = (entries: IntersectionObserverEntry[]): void => {\n      entries.forEach((entry) => {\n        this._visibilityPercentage = entry.intersectionRatio * 100;\n\n        if (entry.isIntersecting) {\n          if (options?.callbackOnIntersect) {\n            options.callbackOnIntersect(this._visibilityPercentage);\n          }\n          this._container?.dispatchEvent(new Event(PlayerEvents.VisibilityChange));\n        } else if (options?.callbackOnIntersect) {\n          options.callbackOnIntersect(0);\n          this._container?.dispatchEvent(new Event(PlayerEvents.VisibilityChange));\n        }\n      });\n    };\n\n    this._onShowIntersectionObserver = new IntersectionObserver(intersectionObserverCallback, observerOptions);\n    this._onShowIntersectionObserver.observe(this.container);\n  }\n\n  public playOnShow(onShowOptions?: { threshold: number[] }): void {\n    this.stop();\n\n    if (!this.container) {\n      throw createError(\"Can't play on show, player container element not available.\");\n    }\n\n    if (this._onShowIntersectionObserver) {\n      this.stopPlayOnShow();\n    }\n\n    // how to know when to pause?\n    this.addIntersectionObserver({\n      threshold: onShowOptions?.threshold ?? [],\n      callbackOnIntersect: (visibilityPercentage) => {\n        if (visibilityPercentage === 0) this.pause();\n        else this.play();\n      },\n    });\n  }\n\n  protected _validatePlaybackOptions(options?: Record<string, unknown>): Partial<PlaybackOptions> {\n    if (!options) return {};\n    const validatedOptions: Partial<PlaybackOptions> = {};\n\n    for (const [key, value] of Object.entries(options)) {\n      switch (key as keyof PlaybackOptions) {\n        case 'autoplay':\n          if (typeof value === 'boolean') {\n            validatedOptions.autoplay = value;\n          }\n          break;\n\n        case 'direction':\n          if (typeof value === 'number' && [1, -1].includes(value)) {\n            validatedOptions.direction = value as AnimationDirection;\n          }\n          break;\n\n        case 'loop':\n          if (typeof value === 'boolean' || typeof value === 'number') {\n            validatedOptions.loop = value;\n          }\n          break;\n\n        case 'playMode':\n          if (typeof value === 'string' && ['normal', 'bounce'].includes(value)) {\n            validatedOptions.playMode = value as PlayMode;\n          }\n          break;\n\n        case 'speed':\n          if (typeof value === 'number') {\n            validatedOptions.speed = value;\n          }\n          break;\n\n        case 'themeColor':\n          if (typeof value === 'string') {\n            validatedOptions.themeColor = value;\n          }\n          break;\n\n        case 'hover':\n          if (typeof value === 'boolean') {\n            validatedOptions.hover = value;\n          }\n          break;\n\n        case 'intermission':\n          if (typeof value === 'number') {\n            validatedOptions.intermission = value;\n          }\n          break;\n\n        case 'defaultTheme':\n          if (typeof value === 'string') {\n            validatedOptions.defaultTheme = value;\n          }\n          break;\n\n        default:\n          break;\n      }\n    }\n\n    this._requireValidPlaybackOptions(validatedOptions);\n\n    return validatedOptions;\n  }\n\n  private _requireAnimationsInTheManifest(): void {\n    if (!this._dotLottieLoader.manifest?.animations.length) {\n      throw createError(`No animations found in manifest.`);\n    }\n  }\n\n  private _requireAnimationsToBeLoaded(): void {\n    if (this._dotLottieLoader.animationsMap.size === 0) {\n      throw createError(`No animations have been loaded.`);\n    }\n  }\n\n  /**\n   * Initiates playback of the animation in the DotLottie player.\n   *\n   * @param activeAnimation - The identifier of the animation to be played. Triggers re-render\n   * @param getOptions - A function that allows customization of playback options.\n   *\n   * @remarks\n   * This function starts playing the animation within the DotLottie player.\n   * It can be used to play a specific animation by providing its identifier.\n   * Should only pass activeAnimationId to render a specific animation. Triggers re-render when passed.\n   * The `getOptions` function, if provided, can be used to customize playback options based on the current playback state and the options specified in the animation manifest.\n   *\n   * @returns void\n   *\n   * @example\n   * ```\n   * player.play('animation1'); // Renders the animation1. And only starts playing if autoplay === true\n   * player.play(); // Can call with empty params to play animation1\n   *\n   * player.play(); // Start playing when player is paused or stopped. Doesn't change animation\n   * ```\n   */\n  public async play(\n    activeAnimation?: string | number,\n    getOptions?: (currPlaybackOptions: PlaybackOptions, manifestPlaybackOptions: PlaybackOptions) => PlaybackOptions,\n  ): Promise<void> {\n    // If the player is in the 'Initial' or 'Loading' state, playback cannot be initiated.\n    // As animationData won't be available at this point.\n    // This avoids the error thrown if user calls play little bit earlier. Useful for the react-layer\n    if ([PlayerState.Initial, PlayerState.Loading].includes(this._currentState)) {\n      logWarning('Player unable to play whilst loading.');\n\n      return;\n    }\n\n    this._requireAnimationsInTheManifest();\n    this._requireAnimationsToBeLoaded();\n\n    if (this._lottie) {\n      if (!activeAnimation) {\n        // Handles play for the currently active animation\n        if (this._lottie.playDirection === -1 && this._lottie.currentFrame === 0) {\n          // If direction is -1 and currentFrame is 0, play needs to start at last frame. Otherwise there are no frames to play.\n          this._lottie.goToAndPlay(this._lottie.totalFrames, true);\n        } else {\n          this._lottie.play();\n        }\n        this.setCurrentState(PlayerState.Playing);\n\n        return;\n      }\n    }\n\n    if (typeof activeAnimation === 'number') {\n      const anim = this._dotLottieLoader.manifest?.animations[activeAnimation];\n\n      if (!anim) {\n        throw createError('animation not found.');\n      }\n\n      if (typeof getOptions === 'function') {\n        // If a `getOptions` function is provided, use it to customize playback options.\n        await this.render({\n          id: anim.id,\n          ...getOptions(this._getPlaybackOptions(), this._getOptionsFromAnimation(anim)),\n        });\n      } else {\n        // Otherwise it doesn't override playback options\n        await this.render({\n          id: anim.id,\n        });\n      }\n    }\n\n    if (typeof activeAnimation === 'string') {\n      const anim = this._dotLottieLoader.manifest?.animations.find((animation) => animation.id === activeAnimation);\n\n      if (!anim) {\n        throw createError('animation not found.');\n      }\n\n      if (typeof getOptions === 'function') {\n        // If a `getOptions` function is provided, use it to customize playback options.\n        await this.render({\n          id: anim.id,\n          ...getOptions(this._getPlaybackOptions(), this._getOptionsFromAnimation(anim)),\n        });\n      } else {\n        // Otherwise it doesn't override playback options\n        await this.render({\n          id: anim.id,\n        });\n      }\n    }\n  }\n\n  public playSegments(segment: AnimationSegment | AnimationSegment[], force?: boolean): void {\n    if (!this._lottie || [PlayerState.Loading].includes(this._currentState)) {\n      logWarning(\"playSegments() Can't use whilst loading.\");\n\n      return;\n    }\n\n    this._lottie.playSegments(segment, force);\n    this.setCurrentState(PlayerState.Playing);\n  }\n\n  public resetSegments(force: boolean): void {\n    if (!this._lottie || [PlayerState.Loading].includes(this._currentState)) {\n      logWarning(\"resetSegments() Can't use whilst loading.\");\n\n      return;\n    }\n\n    this._lottie.resetSegments(force);\n  }\n\n  public togglePlay(): void {\n    if (this.currentState === PlayerState.Playing) {\n      this.pause();\n    } else {\n      this.play();\n    }\n  }\n\n  /**\n   * Retrieves a manifest animation by its identifier or index.\n   *\n   * @param animation - The identifier or index of the animation to retrieve.\n   * @returns The manifest animation corresponding to the provided identifier or index.\n   *\n   * @throws If the specified animation identifier or index is not found in the manifest.\n   * @throws If the first parameter is not a valid number or string.\n   */\n  protected _getAnimationByIdOrIndex(animation: string | number): ManifestAnimation {\n    this._requireAnimationsInTheManifest();\n    this._requireAnimationsToBeLoaded();\n\n    if (typeof animation === 'number') {\n      const animByIndex = this._dotLottieLoader.manifest?.animations[animation];\n\n      if (!animByIndex) {\n        throw createError('animation not found.');\n      }\n\n      return animByIndex;\n    }\n\n    if (typeof animation === 'string') {\n      const animById = this._dotLottieLoader.manifest?.animations.find((anim) => anim.id === animation);\n\n      if (!animById) {\n        throw createError('animation not found.');\n      }\n\n      return animById;\n    }\n\n    throw createError('first param must be a number or string');\n  }\n\n  public get activeAnimationId(): string | undefined {\n    return this._getActiveAnimationId();\n  }\n\n  public get currentAnimationId(): string | undefined {\n    return this._currentAnimationId;\n  }\n\n  public get activeStateId(): string | undefined {\n    return this._activeStateId;\n  }\n\n  /**\n   * Gets the state machines from file and starts the specified state machine.\n   * @param stateId - The identifier of the state machine to use.\n   * @returns\n   */\n  protected async _startInteractivity(stateId: string): Promise<void> {\n    if (!this._inInteractiveMode) {\n      logError(\n        \"Can't start interactivity. Not in interactive mode. Call enterInteractiveMode(stateId: string) to start.\",\n      );\n\n      return;\n    }\n    if (this._dotLottieLoader.stateMachinesMap.size === 0) {\n      await this._dotLottieLoader.getStateMachines();\n    }\n\n    if (this._dotLottieLoader.stateMachinesMap.size === 0) {\n      throw createError('No interactivity states are available.');\n    }\n\n    if (stateId === 'undefined') {\n      throw createError('stateId is not specified.');\n    }\n\n    if (!this._stateMachineManager) {\n      this._stateMachineManager = await loadStateMachines(\n        Array.from(this._dotLottieLoader.stateMachinesMap.values()),\n        this,\n      );\n    }\n\n    this._stateMachineManager.start(stateId);\n  }\n\n  /**\n   * Enters interactive mode for the specified state machine and starts it.\n   * @param stateId - The identifier of the state machine to use.\n   */\n  public enterInteractiveMode(stateId: string): void {\n    if (stateId) {\n      // Cache the player PlaybackOptions before entering interactivity mode for the first time.\n      if (!this._inInteractiveMode) {\n        this._prevUserPlaybackOptions = { ...this._userPlaybackOptions };\n      }\n\n      if (this._inInteractiveMode) {\n        this._stateMachineManager?.stop();\n      }\n\n      this._activeStateId = stateId;\n      this._inInteractiveMode = true;\n\n      this._startInteractivity(stateId);\n    } else {\n      throw createError('stateId must be a non-empty string.');\n    }\n  }\n\n  /**\n   * Exits interactive mode and stops the current state machine.\n   */\n  public exitInteractiveMode(): void {\n    if (!this._inInteractiveMode) {\n      return;\n    }\n\n    this._inInteractiveMode = false;\n    this._activeStateId = '';\n    this._stateMachineManager?.stop();\n\n    // Resets playbackOptions used in interactivity mode\n    this._userPlaybackOptions = {};\n\n    // Update the playbackOptions from user / player\n    this._userPlaybackOptions = { ...this._prevUserPlaybackOptions };\n\n    // clear cached values.\n    this._prevUserPlaybackOptions = {};\n\n    this.reset();\n  }\n\n  public reset(): void {\n    const activeId = this._getActiveAnimationId();\n    const anim = this._dotLottieLoader.manifest?.animations.find((animation) => animation.id === activeId);\n\n    if (this._inInteractiveMode) this.exitInteractiveMode();\n\n    if (!anim) {\n      throw createError('animation not found.');\n    }\n\n    this.play(activeId);\n  }\n\n  public previous(\n    getOptions?: (currPlaybackOptions: PlaybackOptions, manifestPlaybackOptions: PlaybackOptions) => PlaybackOptions,\n  ): void {\n    if (!this._dotLottieLoader.manifest || !this._dotLottieLoader.manifest.animations.length) {\n      throw createError('manifest not found.');\n    }\n\n    if (this._inInteractiveMode) {\n      logWarning('previous() is not supported in interactive mode.');\n\n      return;\n    }\n\n    const currentIndex = this._dotLottieLoader.manifest.animations.findIndex(\n      (anim) => anim.id === this._currentAnimationId,\n    );\n\n    if (currentIndex === -1) {\n      throw createError('animation not found.');\n    }\n\n    const nextAnim =\n      this._dotLottieLoader.manifest.animations[\n        (currentIndex - 1 + this._dotLottieLoader.manifest.animations.length) %\n          this._dotLottieLoader.manifest.animations.length\n      ];\n\n    if (!nextAnim || !nextAnim.id) {\n      throw createError('animation not found.');\n    }\n\n    if (typeof getOptions === 'function') {\n      // If a `getOptions` function is provided, use it to customize playback options.\n      this.render({\n        id: nextAnim.id,\n        ...getOptions(this._getPlaybackOptions(), this._getOptionsFromAnimation(nextAnim)),\n      });\n    } else {\n      // Otherwise it doesn't override playback options\n      this.render({\n        id: nextAnim.id,\n      });\n    }\n  }\n\n  public next(\n    getOptions?: (currPlaybackOptions: PlaybackOptions, manifestPlaybackOptions: PlaybackOptions) => PlaybackOptions,\n  ): void {\n    if (!this._dotLottieLoader.manifest || !this._dotLottieLoader.manifest.animations.length) {\n      throw createError('manifest not found.');\n    }\n\n    if (this._inInteractiveMode) {\n      logWarning('next() is not supported in interactive mode.');\n\n      return;\n    }\n\n    const currentIndex = this._dotLottieLoader.manifest.animations.findIndex(\n      (anim) => anim.id === this._currentAnimationId,\n    );\n\n    if (currentIndex === -1) {\n      throw createError('animation not found.');\n    }\n\n    const nextAnim =\n      this._dotLottieLoader.manifest.animations[(currentIndex + 1) % this._dotLottieLoader.manifest.animations.length];\n\n    if (!nextAnim || !nextAnim.id) {\n      throw createError('animation not found.');\n    }\n\n    if (typeof getOptions === 'function') {\n      // If a `getOptions` function is provided, use it to customize playback options.\n      this.render({\n        id: nextAnim.id,\n        ...getOptions(this._getPlaybackOptions(), this._getOptionsFromAnimation(nextAnim)),\n      });\n    } else {\n      // Otherwise it doesn't override playback options\n      this.render({\n        id: nextAnim.id,\n      });\n    }\n  }\n\n  public getManifest(): Manifest | undefined {\n    return this._dotLottieLoader.manifest;\n  }\n\n  public resize(): void {\n    if (!this._lottie || [PlayerState.Loading].includes(this._currentState)) {\n      logWarning(\"resize() Can't use whilst loading.\");\n\n      return;\n    }\n    this._lottie.resize();\n  }\n\n  public stop(): void {\n    if (!this._lottie || [PlayerState.Loading].includes(this._currentState)) {\n      logWarning(\"stop() Can't use whilst loading.\");\n\n      return;\n    }\n\n    this.clearCountTimer();\n    this._counter = 0;\n\n    this._setPlayerState(() => ({ direction: this._getOption('direction') }));\n    this._lottie.stop();\n    this.setCurrentState(PlayerState.Stopped);\n  }\n\n  public pause(): void {\n    if (!this._lottie || [PlayerState.Loading].includes(this._currentState)) {\n      logWarning(\"pause() Can't use whilst loading.\");\n\n      return;\n    }\n\n    this.clearCountTimer();\n    this._lottie.pause();\n    this.setCurrentState(PlayerState.Paused);\n  }\n\n  public freeze(): void {\n    if (!this._lottie || [PlayerState.Loading].includes(this._currentState)) {\n      logWarning(\"freeze() Can't use whilst loading.\");\n\n      return;\n    }\n\n    if (this.currentState !== PlayerState.Frozen) {\n      this._stateBeforeFreeze = this.currentState;\n    }\n    this._lottie.pause();\n    this.setCurrentState(PlayerState.Frozen);\n  }\n\n  public unfreeze(): void {\n    if (!this._lottie || [PlayerState.Loading].includes(this._currentState)) {\n      logWarning(\"unfreeze() Can't use whilst loading.\");\n\n      return;\n    }\n\n    if (this._stateBeforeFreeze === PlayerState.Playing) {\n      this.play();\n    } else {\n      this.pause();\n    }\n  }\n\n  public destroy(): void {\n    if (this._container?.__lottie) {\n      this._container.__lottie.destroy();\n      this._container.__lottie = null;\n    }\n\n    if (this._audios.length) {\n      // Loop over the instances and unload\n      this._audios.forEach((instance) => {\n        instance.unload();\n      });\n      this._audios = [];\n    }\n\n    this.clearCountTimer();\n    if (typeof document !== 'undefined') {\n      document.removeEventListener('visibilitychange', () => this._onVisibilityChange());\n    }\n    this._counter = 0;\n    this._lottie?.destroy();\n    this._lottie = undefined;\n  }\n\n  public getAnimationInstance(): AnimationItem | undefined {\n    return this._lottie;\n  }\n\n  public static getLottieWebVersion(): string {\n    return `${pkg.dependencies['lottie-web']}`;\n  }\n\n  public addEventListener(name: AnimationEventName, cb: () => void): void {\n    if (!this._listeners.has(name)) {\n      this._listeners.set(name, new Set());\n    }\n    this._listeners.get(name)?.add(cb);\n    try {\n      if (name === 'complete') {\n        this._container?.addEventListener(name, cb);\n      } else {\n        this._lottie?.addEventListener(name, cb);\n      }\n    } catch (error) {\n      logError(`addEventListener ${error}`);\n    }\n  }\n\n  public getState(): DotLottiePlayerState {\n    return {\n      autoplay: this._lottie?.autoplay ?? false,\n      currentState: this._currentState,\n      frame: this._frame,\n      visibilityPercentage: this._visibilityPercentage,\n      seeker: this._seeker,\n      direction: (this._lottie?.playDirection ?? 1) as AnimationDirection,\n      hover: this._hover,\n      loop: this._loop || false,\n      playMode: this._mode,\n      speed: this._lottie?.playSpeed ?? 1,\n      background: this._background,\n      intermission: this._intermission,\n      defaultTheme: this._defaultTheme,\n      currentAnimationId: this._currentAnimationId,\n      activeStateId: this._activeStateId ?? '',\n    };\n  }\n\n  protected _notify(): void {\n    this.state.setState(this.getState());\n  }\n\n  public get totalFrames(): number {\n    return this._lottie?.totalFrames || 0;\n  }\n\n  public get direction(): 1 | -1 {\n    if (!this._lottie) return 1;\n\n    return this._lottie.playDirection as 1 | -1;\n  }\n\n  public setDirection(direction: 1 | -1): void {\n    this._requireValidDirection(direction);\n\n    this._setPlayerState(() => ({ direction }));\n    this._userPlaybackOptions.direction = direction;\n  }\n\n  public get speed(): number {\n    return this._lottie?.playSpeed || 1;\n  }\n\n  public setSpeed(speed: number): void {\n    this._requireValidSpeed(speed);\n\n    this._setPlayerState(() => ({ speed }));\n    this._userPlaybackOptions.speed = speed;\n  }\n\n  public get autoplay(): boolean {\n    return this._lottie?.autoplay ?? false;\n  }\n\n  public setAutoplay(value: boolean): void {\n    this._requireValidAutoplay(value);\n\n    if (!this._lottie || [PlayerState.Loading].includes(this._currentState)) {\n      logWarning(\"setAutoplay() Can't use whilst loading.\");\n\n      return;\n    }\n\n    this._setPlayerState(() => ({ autoplay: value }));\n    this._userPlaybackOptions.autoplay = value;\n  }\n\n  public toggleAutoplay(): void {\n    if (!this._lottie || [PlayerState.Loading].includes(this._currentState)) {\n      logWarning(\"toggleAutoplay() Can't use whilst loading.\");\n\n      return;\n    }\n    this.setAutoplay(!this._lottie.autoplay);\n  }\n\n  public get defaultTheme(): string {\n    return this._defaultTheme;\n  }\n\n  public setDefaultTheme(value: string): void {\n    this._setPlayerState(() => ({ defaultTheme: value }));\n    this._userPlaybackOptions.defaultTheme = value;\n\n    if (this._animation) {\n      this.render();\n    }\n  }\n\n  public get loop(): number | boolean {\n    return this._loop;\n  }\n\n  public setLoop(value: boolean | number): void {\n    this._requireValidLoop(value);\n\n    this._setPlayerState(() => ({ loop: value }));\n    this._userPlaybackOptions.loop = value;\n  }\n\n  public toggleLoop(): void {\n    if (!this._lottie || [PlayerState.Loading].includes(this._currentState)) {\n      logWarning(\"toggleLoop() Can't use whilst loading.\");\n\n      return;\n    }\n    this.setLoop(!this._loop);\n  }\n\n  public get background(): string {\n    return this._background;\n  }\n\n  public setBackground(color: string): void {\n    this._requireValidBackground(color);\n\n    this._background = color;\n    if (this._container) {\n      this._container.style.backgroundColor = color;\n    }\n  }\n\n  protected get _frame(): number {\n    if (!this._lottie) return 0;\n\n    if (this.currentState === PlayerState.Completed) {\n      if (this.direction === -1) {\n        return 0;\n      } else {\n        return this._lottie.totalFrames;\n      }\n    }\n\n    return this._lottie.currentFrame;\n  }\n\n  protected get _seeker(): number {\n    if (!this._lottie) return 0;\n\n    return (this._frame / this._lottie.totalFrames) * 100;\n  }\n\n  /**\n   * Reverts playback options to their values as defined in the manifest for specified keys.\n   *\n   * @param playbackKeys - An optional array of playback option keys to revert. If not provided, all supported keys will be reverted.\n   *\n   * @remarks\n   * - activeAnimationId added as an additional option as its part of Manifest.\n   * - A re-render will be triggered if `activeAnimationId` or `defaultTheme` is being passed\n   *\n   * @returns Nothing.\n   */\n  public async revertToManifestValues(\n    playbackKeys?: Array<keyof PlaybackOptions | 'activeAnimationId'>,\n  ): Promise<void> {\n    let revertOptions: Array<keyof PlaybackOptions | 'activeAnimationId'>;\n\n    if (!Array.isArray(playbackKeys) || playbackKeys.length === 0) {\n      revertOptions = [\n        'autoplay',\n        'defaultTheme',\n        'direction',\n        'hover',\n        'intermission',\n        'loop',\n        'playMode',\n        'speed',\n        'activeAnimationId',\n      ];\n    } else {\n      revertOptions = playbackKeys;\n    }\n\n    let shouldRender = false;\n\n    if (revertOptions.includes('activeAnimationId')) {\n      const activeAnimationId = this._dotLottieLoader.manifest?.activeAnimationId;\n\n      const animation = this._getAnimationByIdOrIndex(activeAnimationId || 0);\n\n      this._activeAnimationId = activeAnimationId;\n\n      await this._setCurrentAnimation(animation.id);\n\n      shouldRender = true;\n    }\n\n    revertOptions.forEach((key) => {\n      switch (key) {\n        case 'autoplay':\n          delete this._userPlaybackOptions.autoplay;\n          this.setAutoplay(this._getOption('autoplay'));\n          break;\n\n        case 'defaultTheme':\n          delete this._userPlaybackOptions.defaultTheme;\n          this.setDefaultTheme(this._getOption('defaultTheme'));\n          break;\n\n        case 'direction':\n          delete this._userPlaybackOptions.direction;\n          this.setDirection(this._getOption('direction'));\n          break;\n\n        case 'hover':\n          delete this._userPlaybackOptions.hover;\n          this.setHover(this._getOption('hover'));\n          break;\n\n        case 'intermission':\n          delete this._userPlaybackOptions.intermission;\n          this.setIntermission(this._getOption('intermission'));\n          break;\n\n        case 'loop':\n          delete this._userPlaybackOptions.loop;\n          this.setLoop(this._getOption('loop'));\n          break;\n\n        case 'playMode':\n          delete this._userPlaybackOptions.playMode;\n          this.setMode(this._getOption('playMode'));\n          this.setDirection(this._getOption('direction'));\n          break;\n\n        case 'speed':\n          delete this._userPlaybackOptions.speed;\n          this.setSpeed(this._getOption('speed'));\n          break;\n\n        default:\n          break;\n      }\n    });\n\n    // Renders if activeAnimationId being updated.\n    if (shouldRender) {\n      this.render();\n    }\n  }\n\n  // public triggerComplete\n  public removeEventListener(name: AnimationEventName, cb: () => void): void {\n    try {\n      if (name === 'complete') {\n        this._container?.removeEventListener(name, cb);\n      } else {\n        this._lottie?.removeEventListener(name, cb);\n      }\n\n      this._listeners.get(name)?.delete(cb);\n    } catch (error) {\n      logError('removeEventListener', error as string);\n    }\n  }\n\n  protected _handleAnimationComplete(): void {\n    // If loop = number, and animation has reached the end, call stop to go to frame 0\n    if (typeof this._loop === 'number') this.stop();\n\n    const lastFrame = this.direction === -1 ? 0 : this.totalFrames;\n\n    this.goToAndStop(lastFrame, true);\n\n    this._counter = 0;\n    this.clearCountTimer();\n    this.setCurrentState(PlayerState.Completed);\n    this._container?.dispatchEvent(new Event(PlayerEvents.Complete));\n  }\n\n  public addEventListeners(): void {\n    if (!this._lottie || [PlayerState.Loading].includes(this._currentState)) {\n      logWarning(\"addEventListeners() Can't use whilst loading.\");\n\n      return;\n    }\n\n    this._lottie.addEventListener('enterFrame', () => {\n      // Update seeker and frame value based on the current animation frame\n      if (!this._lottie) {\n        logWarning('enterFrame event : Lottie is undefined.');\n\n        return;\n      }\n\n      const flooredFrame = Math.floor(this._lottie.currentFrame);\n\n      if (flooredFrame === 0) {\n        if (this.direction === -1) {\n          this._container?.dispatchEvent(new Event(PlayerEvents.Complete));\n          if (!this.loop) this.setCurrentState(PlayerState.Completed);\n        }\n      }\n\n      // Notify state subscriptions about the frame and seeker update.\n      this._notify();\n    });\n\n    this._lottie.addEventListener('loopComplete', () => {\n      if (!this._lottie) {\n        logWarning('loopComplete event : Lottie is undefined.');\n\n        return;\n      }\n\n      this._container?.dispatchEvent(new Event(PlayerEvents.LoopComplete));\n\n      if (this.intermission > 0) {\n        this.pause();\n      }\n\n      let newDirection = this._lottie.playDirection;\n\n      if (typeof this._loop === 'number' && this._loop > 0) {\n        // In case loop is a number keep the track of the loops internally.\n        // For PlayMode `bounce` 1 loop = once it completes playing for both directions\n        this._counter += this._mode === PlayMode.Bounce ? 0.5 : 1;\n        if (this._counter >= this._loop) {\n          // Once it completes specified number of loops trigger a manual complete to stop the player.\n          this._handleAnimationComplete();\n\n          return;\n        }\n      }\n\n      if (this._mode === PlayMode.Bounce && typeof newDirection === 'number') {\n        // Reverse the direction if playing in 'Bounce' mode.\n        newDirection = Number(newDirection) * -1;\n      }\n\n      // Determine the start frame based on the direction.\n      const startFrame = newDirection === -1 ? this._lottie.totalFrames - 1 : 0;\n\n      if (this.intermission) {\n        // Intermission behavior.\n        // 1. Pause:  Pause the player\n        // 2. Set Timer:  Resume.\n\n        this.goToAndPlay(startFrame, true);\n        // 1. Pause\n        this.pause();\n\n        // 2. Set a timeout to resume animation after intermission duration.\n        this._counterInterval = window.setTimeout(() => {\n          if (!this._lottie) return;\n\n          // Next Play event\n          this._setPlayerState(() => ({ direction: newDirection as AnimationDirection }));\n          this.goToAndPlay(startFrame, true);\n        }, this._intermission);\n      } else {\n        // Without intermission keep playing without interruption\n        // Note: A manual goToAndPlay is required to handle bounce\n        this._setPlayerState(() => ({ direction: newDirection as AnimationDirection }));\n        this.goToAndPlay(newDirection === -1 ? this.totalFrames - 1 : 0, true);\n      }\n    });\n\n    this._lottie.addEventListener('complete', () => {\n      // Special case: To handle the reverse play for PlayMode bounce. If loop is false.\n      if (this._lottie && this._loop === false && this._mode === PlayMode.Bounce) {\n        this._counter += 0.5;\n        // Trigger complete after reverse play\n        if (this._counter >= 1) {\n          this._handleAnimationComplete();\n\n          return;\n        }\n\n        // Set a timeout to resume animation after intermission duration.\n        this._counterInterval = window.setTimeout(() => {\n          if (!this._lottie) return;\n\n          let newDirection = this._lottie.playDirection;\n\n          if (this._mode === PlayMode.Bounce && typeof newDirection === 'number') {\n            newDirection = Number(newDirection) * -1;\n          }\n\n          const startFrame = newDirection === -1 ? this.totalFrames - 1 : 0;\n\n          this._setPlayerState(() => ({ direction: newDirection as AnimationDirection }));\n          this.goToAndPlay(startFrame, true);\n        }, this._intermission);\n      } else {\n        this._handleAnimationComplete();\n      }\n    });\n\n    // Re-attaching the listeners. Requires for re-renders\n    for (const [name, callbacks] of this._listeners) {\n      if (name === 'complete') {\n        for (const cb of callbacks) {\n          this._container?.addEventListener(name, cb);\n        }\n      } else {\n        for (const cb of callbacks) {\n          this._lottie.addEventListener(name, cb);\n        }\n      }\n    }\n  }\n\n  protected async _setCurrentAnimation(animationId: string): Promise<void> {\n    this._currentState = PlayerState.Loading;\n    const anim = await this._dotLottieLoader.getAnimation(animationId);\n\n    this._currentAnimationId = animationId;\n    this._animation = anim;\n    this._currentState = PlayerState.Ready;\n  }\n\n  protected async _getAudioFactory(): Promise<((assetPath: string) => DotLottieAudio) | null> {\n    if (this._animation && lottieContainsAudio(this._animation)) {\n      const { DotLottieAudio } = await import('./dotlottie-audio');\n\n      const audioFactory = (assetPath: string): DotLottieAudio => {\n        const audioInstance = new DotLottieAudio({\n          src: [assetPath],\n        });\n\n        this._audios.push(audioInstance);\n\n        return audioInstance;\n      };\n\n      return audioFactory;\n    }\n\n    return null;\n  }\n\n  // If we go back to default animation or at animation 0 we need to use props\n  protected async render(activeAnimation?: Partial<ManifestAnimation>): Promise<void> {\n    if (activeAnimation?.id) {\n      await this._setCurrentAnimation(activeAnimation.id);\n    } else if (!this._animation) {\n      throw createError('no animation selected');\n    }\n\n    let loop: number | boolean = DEFAULT_OPTIONS.loop ?? false;\n    let autoplay: boolean = DEFAULT_OPTIONS.autoplay ?? false;\n    let mode: PlayMode = DEFAULT_OPTIONS.playMode ?? PlayMode.Normal;\n    let intermission: number = DEFAULT_OPTIONS.intermission ?? 0;\n    let hover: boolean = DEFAULT_OPTIONS.hover ?? false;\n    let direction: AnimationDirection = (DEFAULT_OPTIONS.direction ?? 1) as AnimationDirection;\n    let speed: number = DEFAULT_OPTIONS.speed ?? 1;\n    let defaultTheme: string = DEFAULT_OPTIONS.defaultTheme ?? '';\n\n    // Either read properties from passed ManifestAnimation or use manifest values\n    loop = activeAnimation?.loop ?? this._getOption('loop');\n    autoplay = activeAnimation?.autoplay ?? this._getOption('autoplay');\n    mode = activeAnimation?.playMode ?? this._getOption('playMode');\n    intermission = activeAnimation?.intermission ?? this._getOption('intermission');\n    hover = activeAnimation?.hover ?? this._getOption('hover');\n    direction = (activeAnimation?.direction ?? this._getOption('direction')) as AnimationDirection;\n    speed = activeAnimation?.speed ?? this._getOption('speed');\n    defaultTheme = activeAnimation?.defaultTheme ?? this._getOption('defaultTheme');\n\n    const options = {\n      ...this._animationConfig,\n      autoplay: hover ? false : autoplay,\n      // If loop is a number pass to lottie-web as `true`.\n      // See 'loopComplete' to understand how loops are handled.\n      loop: typeof loop === 'number' ? true : loop,\n      renderer: this._worker ? 'svg' : this._animationConfig.renderer ?? 'svg',\n    };\n\n    // load the dependencies in parallel\n    const [lottieStyleSheet, lottiePlayer, audioFactory] = await Promise.all([\n      this._dotLottieLoader.getTheme(defaultTheme),\n      this._getLottiePlayerInstance(),\n      this._getAudioFactory(),\n    ]);\n\n    if (lottieStyleSheet && this._animation) {\n      this._animation = await applyLottieStyleSheet(this._animation, lottieStyleSheet);\n    } else {\n      this._animation = await this._dotLottieLoader.getAnimation(this._currentAnimationId ?? '');\n    }\n\n    if (this._activeStateId && !this._inInteractiveMode) {\n      // If we detect state machines are being used, load all of them up from the file\n      this.enterInteractiveMode(this._activeStateId);\n\n      return;\n    }\n\n    this.destroy();\n\n    // Modifying for current animation before render\n    this._setPlayerState(() => ({\n      defaultTheme,\n      playMode: mode,\n      intermission,\n      hover,\n      loop,\n    }));\n\n    if (audioFactory) {\n      this._lottie = lottiePlayer.loadAnimation({\n        ...options,\n        container: this._container as Element,\n        animationData: this._animation,\n        audioFactory,\n      });\n    } else {\n      this._lottie = lottiePlayer.loadAnimation({\n        ...options,\n        container: this._container as Element,\n        animationData: this._animation,\n      });\n    }\n\n    // Define our own reset segments for worker if its un-implemented\n    // eslint-disable-next-line no-secrets/no-secrets\n    // This can be removed when this PR is merged: https://github.com/airbnb/lottie-web/commit/a77933060a2da15557818ae03326eb77945e4b65\n    if (typeof this._lottie.resetSegments === 'undefined') {\n      this._lottie.resetSegments = (): void => {\n        this._lottie?.playSegments([0, this._lottie.totalFrames], true);\n      };\n    }\n\n    this.addEventListeners();\n\n    if (this._container) {\n      this._container.__lottie = this._lottie;\n    }\n\n    // Modifying for current animation after render\n    this._setPlayerState(() => ({\n      direction,\n      speed,\n    }));\n\n    if (autoplay && !hover) {\n      if (loop === false && direction === -1) {\n        // Trigger manual play since. Autoplay doesn't work in this scenario.\n        // See logic within play() function: `if (this._lottie.playDirection === -1 && this._lottie.currentFrame === 0) `\n        this.play();\n      } else {\n        this.setCurrentState(PlayerState.Playing);\n      }\n    }\n\n    this._updateTestData();\n  }\n\n  private async _getLottiePlayerInstance(): Promise<LottiePlayer> {\n    const renderer = this._animationConfig.renderer ?? 'svg';\n\n    // eslint-disable-next-line @typescript-eslint/consistent-type-imports\n    let LottieWebModule: typeof import('lottie-web');\n\n    if (this._worker) {\n      if (renderer !== 'svg') {\n        logWarning(\n          'Worker is only supported with svg renderer. Change or remove renderer prop to get rid of this warning.',\n        );\n      }\n      // @ts-ignore\n      LottieWebModule = await import(`lottie-web/build/player/lottie_worker`);\n\n      return LottieWebModule.default;\n    }\n    switch (renderer) {\n      case 'svg': {\n        if (this._light) {\n          LottieWebModule = await import(`lottie-web/build/player/lottie_light`);\n        } else {\n          LottieWebModule = await import(`lottie-web/build/player/lottie_svg`);\n        }\n\n        break;\n      }\n\n      case 'canvas': {\n        if (this._light) {\n          LottieWebModule = await import(`lottie-web/build/player/lottie_light_canvas`);\n        } else {\n          // @ts-ignore\n          LottieWebModule = await import(`lottie-web/build/player/lottie_canvas`);\n        }\n\n        break;\n      }\n\n      case 'html': {\n        if (this._light) {\n          LottieWebModule = await import(`lottie-web/build/player/lottie_light_html`);\n        } else {\n          LottieWebModule = await import(`lottie-web/build/player/lottie_html`);\n        }\n\n        break;\n      }\n\n      default:\n        throw new Error(`Invalid renderer: ${renderer}`);\n    }\n\n    return LottieWebModule.default;\n  }\n\n  private _getActiveAnimationId(): string | undefined {\n    const manifest = this._dotLottieLoader.manifest;\n\n    return this._activeAnimationId ?? manifest?.activeAnimationId ?? manifest?.animations[0]?.id ?? undefined;\n  }\n\n  public async load(playbackOptions?: PlaybackOptions): Promise<void> {\n    if (this._currentState === PlayerState.Loading) {\n      logWarning('Loading in progress..');\n\n      return;\n    }\n\n    try {\n      this.setCurrentState(PlayerState.Loading);\n\n      if (typeof this._src === 'string') {\n        if (isValidLottieString(this._src)) {\n          const validLottieJson = JSON.parse(this._src);\n\n          this._dotLottieLoader.loadFromLottieJSON(validLottieJson);\n        } else {\n          const url = new URL(this._src, window.location.href);\n\n          await this._dotLottieLoader.loadFromUrl(url.toString());\n        }\n      } else if (typeof this._src === 'object' && isValidLottieJSON(this._src)) {\n        this._dotLottieLoader.loadFromLottieJSON(this._src);\n      } else {\n        throw createError('Invalid src provided');\n      }\n\n      if (!this._dotLottieLoader.manifest) {\n        throw createError('No manifest found');\n      }\n\n      const activeAnimationId = this._getActiveAnimationId();\n\n      if (!activeAnimationId) {\n        throw createError('No active animation found');\n      }\n\n      await this._setCurrentAnimation(activeAnimationId);\n\n      await this.render(playbackOptions);\n    } catch (error) {\n      this.setCurrentState(PlayerState.Error);\n      if (error instanceof Error) {\n        logError(`Error loading animation: ${error.message}`);\n      }\n    }\n  }\n\n  protected setErrorState(msg: string): void {\n    this.setCurrentState(PlayerState.Error);\n    logError(msg);\n  }\n\n  /**\n   * Ensure that the provided direction is a valid number.\n   * @param direction - The direction to validate.\n   */\n  private _requireValidDirection(direction: number): asserts direction is number {\n    if (direction !== -1 && direction !== 1) {\n      throw createError('Direction can only be -1 (backwards) or 1 (forwards)');\n    }\n  }\n\n  /**\n   * Ensure that the provided intermission is a valid, positive number.\n   * @param intermission - The intermission to validate.\n   * @throws Error - if the intermission is not a valid number.\n   */\n  private _requireValidIntermission(intermission: number): asserts intermission is number {\n    if (intermission < 0 || !Number.isInteger(intermission)) {\n      throw createError('intermission must be a positive number');\n    }\n  }\n\n  /**\n   * Ensure that the provided loop is a valid, positive number or boolean.\n   * @param loop - The loop to validate.\n   * @throws Error - if the loop is not a valid number or boolean.\n   */\n  private _requireValidLoop(loop: number | boolean): asserts loop is number | boolean {\n    if (typeof loop === 'number' && (!Number.isInteger(loop) || loop < 0)) {\n      throw createError('loop must be a positive number or boolean');\n    }\n  }\n\n  /**\n   * Ensure that the provided speed is a valid number.\n   * @param speed - The speed to validate.\n   * @throws Error - if the speed is not a valid number.\n   */\n  private _requireValidSpeed(speed: number): asserts speed is number {\n    if (typeof speed !== 'number') {\n      throw createError('speed must be a number');\n    }\n  }\n\n  /**\n   * Ensure that the provided background is a valid string.\n   * @param background - The background to validate.\n   * @throws Error - if the background is not a valid string.\n   */\n  private _requireValidBackground(background: string): asserts background is string {\n    if (typeof background !== 'string') {\n      throw createError('background must be a string');\n    }\n  }\n\n  /**\n   * Ensure that the provided autoplay is a valid boolean.\n   * @param autoplay - The autoplay to validate.\n   * @throws Error - if the autoplay is not a valid boolean.\n   */\n  private _requireValidAutoplay(autoplay: boolean): asserts autoplay is boolean {\n    if (typeof autoplay !== 'boolean') {\n      throw createError('autoplay must be a boolean');\n    }\n  }\n\n  /**\n   * Ensure that the provided options object is a valid PlaybackOptions object.\n   * @param options - The options object to validate.\n   */\n  private _requireValidPlaybackOptions(options: PlaybackOptions): asserts options is PlaybackOptions {\n    if (options.direction) {\n      this._requireValidDirection(options.direction);\n    }\n\n    if (options.intermission) {\n      this._requireValidIntermission(options.intermission);\n    }\n\n    if (options.loop) {\n      this._requireValidLoop(options.loop);\n    }\n\n    if (options.speed) {\n      this._requireValidSpeed(options.speed);\n    }\n  }\n}\n"]}