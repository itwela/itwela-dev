{"version":3,"sources":["../src/dotlottie-state-machine-loader.ts"],"names":["loadStateMachines","stateMachines","player","DotLottieStateMachineManager","createError"],"mappings":"wCAiBA,eAAsBA,EACpBC,EACAC,EACuC,CAEvC,GAAM,CAAC,CAAE,6BAAAC,CAA6B,CAAC,EAAI,MAAM,QAAQ,IAAI,CAAC,OAAO,+CAAyC,CAAC,CAAC,EAEhH,GAAI,CAACF,EAAc,OACjB,MAAMG,EAAY,kDAAkD,EAGtE,OAAO,IAAID,EAA6BF,EAAeC,CAAM,CAC/D","sourcesContent":["/**\n * Copyright 2023 Design Barn Inc.\n */\n\nimport type { LottieStateMachine } from '@dotlottie/dotlottie-js';\n\nimport type { DotLottieCommonPlayer } from './dotlottie-player';\nimport type { DotLottieStateMachineManager } from './state/dotlottie-state-machine-manager';\nimport { createError } from './utils';\n\n/**\n * Load all the state machines in to XState.\n *\n * @param stateMachines - The state machines to load.\n * @param player - The dotLottie player object.\n * @returns A promise that resolves DotLottie state machine manager.\n */\nexport async function loadStateMachines(\n  stateMachines: LottieStateMachine[],\n  player: DotLottieCommonPlayer,\n): Promise<DotLottieStateMachineManager> {\n  // Dynamically load state machine related dependencies\n  const [{ DotLottieStateMachineManager }] = await Promise.all([import('./state/dotlottie-state-machine-manager')]);\n\n  if (!stateMachines.length) {\n    throw createError('No state machines available inside this .lottie!');\n  }\n\n  return new DotLottieStateMachineManager(stateMachines, player);\n}\n"]}