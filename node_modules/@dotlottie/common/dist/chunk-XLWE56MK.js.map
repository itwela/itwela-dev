{"version":3,"sources":["../src/dotlottie-loader.ts"],"names":["DotLottieLoader","url","response","contentType","json","isValidLottieJSON","animationId","getFilename","tempManifest","loadFromArrayBuffer","manifest","getManifest","arrayBuffer","animation","getAnimation","themeId","theme","getTheme","stateMachines","getStateMachines","key","stateMachine","parsedStateMachine","id","stateMachineId","getStateMachine"],"mappings":"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","sourcesContent":["/**\n * Copyright 2023 Design Barn Inc.\n */\n\nimport type { AnimationData, LottieStateMachine } from '@dotlottie/dotlottie-js';\nimport {\n  getTheme as getThemeUtil,\n  getStateMachine as getStateMachineUtil,\n  getStateMachines as getStateMachinesUtil,\n  getAnimation as getAnimationUtil,\n  getManifest as getManifestUtil,\n  loadFromArrayBuffer as loadFromArrayBufferUtil,\n} from '@dotlottie/dotlottie-js';\n\nimport type { Manifest } from './dotlottie-player';\nimport { getFilename, isValidLottieJSON } from './utils';\n\nexport class DotLottieLoader {\n  private _dotLottie?: Uint8Array;\n\n  private readonly _animationsMap: Map<string, AnimationData> = new Map();\n\n  private readonly _themeMap: Map<string, string> = new Map();\n\n  private readonly _stateMachinesMap: Map<string, LottieStateMachine> = new Map();\n\n  private _manifest?: Manifest;\n\n  public get dotLottie(): Uint8Array | undefined {\n    return this._dotLottie;\n  }\n\n  public get animationsMap(): Map<string, AnimationData> {\n    return this._animationsMap;\n  }\n\n  public get themeMap(): Map<string, string> {\n    return this._themeMap;\n  }\n\n  public get stateMachinesMap(): Map<string, LottieStateMachine> {\n    return this._stateMachinesMap;\n  }\n\n  public get manifest(): Manifest | undefined {\n    return this._manifest;\n  }\n\n  public async loadFromUrl(url: string): Promise<void> {\n    const response = await fetch(url, {\n      method: 'GET',\n      mode: 'cors',\n    });\n\n    if (!response.ok) {\n      throw new Error(`Failed to load dotLottie from ${url} with status ${response.status}`);\n    }\n\n    const contentType = response.headers.get('content-type');\n\n    if (contentType?.includes('application/json')) {\n      const json = await response.json();\n\n      if (!isValidLottieJSON(json)) {\n        throw new Error(`Invalid lottie JSON at ${url}`);\n      }\n\n      const animationId = getFilename(url);\n\n      this._animationsMap.set(animationId, json as AnimationData);\n\n      const tempManifest: Manifest = {\n        activeAnimationId: animationId,\n        animations: [\n          {\n            id: animationId,\n          },\n        ],\n      };\n\n      this._manifest = tempManifest;\n    } else {\n      this._dotLottie = await loadFromArrayBufferUtil(await response.arrayBuffer());\n\n      const manifest = await getManifestUtil(this._dotLottie);\n\n      if (!manifest) {\n        throw new Error('Manifest not found');\n      }\n\n      this._manifest = manifest as Manifest;\n    }\n  }\n\n  public loadFromLottieJSON(json: Record<string, unknown>): void {\n    if (!isValidLottieJSON(json)) {\n      throw new Error('Invalid lottie JSON');\n    }\n\n    const animationId = 'my-animation';\n\n    this._animationsMap.set(animationId, json as unknown as AnimationData);\n\n    const tempManifest: Manifest = {\n      activeAnimationId: animationId,\n      animations: [\n        {\n          id: animationId,\n        },\n      ],\n    };\n\n    this._manifest = tempManifest;\n  }\n\n  public async loadFromArrayBuffer(arrayBuffer: ArrayBuffer): Promise<void> {\n    this._dotLottie = await loadFromArrayBufferUtil(arrayBuffer);\n\n    const manifest = await getManifestUtil(this._dotLottie);\n\n    if (!manifest) {\n      throw new Error('Manifest not found');\n    }\n\n    this._manifest = manifest as Manifest;\n  }\n\n  public async getAnimation(animationId: string): Promise<AnimationData | undefined> {\n    if (this._animationsMap.get(animationId)) {\n      return this._animationsMap.get(animationId) as AnimationData;\n    }\n\n    if (!this._dotLottie) {\n      return undefined;\n    }\n\n    const animation = await getAnimationUtil(this._dotLottie, animationId, { inlineAssets: true });\n\n    if (animation) {\n      this._animationsMap.set(animationId, animation);\n    }\n\n    return animation;\n  }\n\n  public async getTheme(themeId: string): Promise<string | undefined> {\n    if (this._themeMap.get(themeId)) {\n      return this._themeMap.get(themeId) as string;\n    }\n\n    if (!this._dotLottie) {\n      return undefined;\n    }\n\n    const theme = await getThemeUtil(this._dotLottie, themeId);\n\n    if (theme) {\n      this._themeMap.set(themeId, theme);\n    }\n\n    return theme;\n  }\n\n  public async getStateMachines(): Promise<LottieStateMachine[] | undefined> {\n    if (!this._dotLottie) {\n      return undefined;\n    }\n\n    const stateMachines: Record<string, string> = await getStateMachinesUtil(this._dotLottie);\n\n    for (const key in stateMachines) {\n      if (key) {\n        const stateMachine = stateMachines[key];\n\n        if (stateMachine) {\n          const parsedStateMachine = JSON.parse(stateMachine);\n\n          if (parsedStateMachine) {\n            const id = parsedStateMachine.descriptor.id;\n\n            if (!this._stateMachinesMap.get(id)) this._stateMachinesMap.set(id, parsedStateMachine);\n          }\n        }\n      }\n    }\n\n    return Array.from(this._stateMachinesMap.values());\n  }\n\n  public async getStateMachine(stateMachineId: string): Promise<LottieStateMachine | undefined> {\n    if (this._stateMachinesMap.get(stateMachineId)) {\n      return this._stateMachinesMap.get(stateMachineId);\n    }\n\n    if (!this._dotLottie) {\n      return undefined;\n    }\n\n    const stateMachine = await getStateMachineUtil(this._dotLottie, stateMachineId);\n\n    if (stateMachine) {\n      this._stateMachinesMap.set(stateMachine.descriptor.id, stateMachine);\n    }\n\n    return stateMachine;\n  }\n}\n"]}