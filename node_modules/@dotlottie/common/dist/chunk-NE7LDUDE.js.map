{"version":3,"sources":["../src/dotlottie-styler.ts"],"names":["applyLottieStyleSheet","animation","lottieStyleSheet","relottie","style","vFile"],"mappings":"AAaA,eAAsBA,EAAsBC,EAAsBC,EAA8C,CAE9G,GAAM,CAAC,CAAE,SAAAC,CAAS,EAAG,CAAE,QAASC,CAAM,CAAC,EAAI,MAAM,QAAQ,IAAI,CAC3D,OAAO,oBAA6B,EACpC,OAAO,oBAA6B,CACtC,CAAC,EAEKC,EAAQ,MAAMF,EAAS,EAAE,IAAIC,EAAO,CAAE,IAAKF,CAAiB,CAAC,EAAE,QAAQ,KAAK,UAAUD,CAAS,CAAC,EAEtG,OAAO,KAAK,MAAMI,EAAM,KAAK,CAC/B","sourcesContent":["/**\n * Copyright 2023 Design Barn Inc.\n */\n\nimport type { Animation } from '@lottiefiles/lottie-types';\n\n/**\n * Apply a Lottie stylesheet to a given animation.\n *\n * @param animation - The original Lottie animation.\n * @param lottieStyleSheet - The stylesheet to apply to the animation.\n * @returns A promise that resolves with the styled animation.\n */\nexport async function applyLottieStyleSheet(animation: Animation, lottieStyleSheet: string): Promise<Animation> {\n  // Dynamically load theming related dependencies\n  const [{ relottie }, { default: style }] = await Promise.all([\n    import('@lottiefiles/relottie/index'),\n    import('@lottiefiles/relottie-style'),\n  ]);\n\n  const vFile = await relottie().use(style, { lss: lottieStyleSheet }).process(JSON.stringify(animation));\n\n  return JSON.parse(vFile.value) as Animation;\n}\n"]}