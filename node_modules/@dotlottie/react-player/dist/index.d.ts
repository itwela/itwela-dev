import { DotLottieCommonPlayer, PlayerEvents, PlayMode, RendererSettings, DotLottiePlayerState } from '@dotlottie/common';
export * from '@dotlottie/common';
import * as React from 'react';
import React__default from 'react';

/**
 * Copyright 2023 Design Barn Inc.
 */

interface Props extends React__default.HTMLAttributes<HTMLDivElement> {
    activeAnimationId?: string;
    activeStateId?: string;
    autoplay?: boolean;
    background?: string;
    className?: string;
    defaultTheme?: string;
    direction?: 1 | -1;
    hover?: boolean;
    intermission?: number;
    light?: boolean;
    loop?: number | boolean;
    /** @deprecated Use `ref` instead. */
    lottieRef?: React__default.Ref<DotLottieCommonPlayer>;
    onEvent?: <T extends PlayerEvents>(name: T, params?: unknown) => void;
    playMode?: PlayMode;
    renderer?: 'svg' | 'canvas' | 'html';
    rendererSettings?: RendererSettings;
    speed?: number;
    src: Record<string, unknown> | string;
    testId?: string;
    worker?: boolean;
}
declare const DotLottiePlayer: React__default.ForwardRefExoticComponent<Props & React__default.RefAttributes<DotLottieCommonPlayer | null>>;

/**
 * Copyright 2023 Design Barn Inc.
 */

declare const AVAILABLE_BUTTONS: readonly ["play", "stop", "loop", "next", "previous", "animations", "themes"];
interface ControlsProps extends React__default.HTMLAttributes<HTMLDivElement> {
    buttons?: Array<typeof AVAILABLE_BUTTONS[number]>;
    show?: boolean;
}
declare const Controls: React__default.FC<ControlsProps>;

declare const DotLottieProvider: React.Provider<DotLottieCommonPlayer | null>;
declare const useDotLottieContext: () => DotLottieCommonPlayer | null;

/**
 * Copyright 2023 Design Barn Inc.
 */

type Unsubscribe = () => void;
type Subscribe = (onStateChange: () => void) => Unsubscribe;
declare function useDotLottieState<T>(selector: (state: DotLottiePlayerState) => T): T | undefined;

export { Controls, DotLottiePlayer, DotLottieProvider, Props, Subscribe, Unsubscribe, useDotLottieContext, useDotLottieState };
