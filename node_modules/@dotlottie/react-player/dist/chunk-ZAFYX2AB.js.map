{"version":3,"sources":["../src/react-player.tsx","../src/hooks/use-dotlottie-player.ts","../src/hooks/use-select-dotlottie-state.ts"],"names":["PlayerState","PlayerEvents","React","useEffect","useRef","DotLottieCommonPlayer","useLayoutEffect","useState","useIsomorphicLayoutEffect","useDotLottiePlayer","src","containerRef","config","dotLottiePlayer","loadedRef","load","DEFAULT_STATE","useCallback","useSelectDotLottieState","selector","getSelection","subscribe","listener","useSyncExternalStore","styles","DotLottiePlayer","onEvent","activeAnimationId","autoplay","background","direction","intermission","loop","playMode","hover","speed","renderer","rendererSettings","className","testId","children","defaultTheme","light","worker","activeStateId","lottieRef","props","ref","dotLottieCommonPlayer","dotLottieCommonPlayerRef","currentState","state","frame","seeker","currentAnimationId","useUpdateEffect_default","onDOMLoaded","onDataReady","onDataFailed","onComplete","onLoopComplete","DotLottieProvider"],"mappings":"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","sourcesContent":["/**\n * Copyright 2023 Design Barn Inc.\n */\n\nimport { PlayerState, PlayerEvents } from '@dotlottie/common';\nimport type { RendererSettings, PlayMode, DotLottieCommonPlayer, DotLottieElement } from '@dotlottie/common';\nimport React, { useEffect, useRef } from 'react';\nimport { useUpdateEffect } from 'react-use';\n\nimport { useDotLottiePlayer } from './hooks/use-dotlottie-player';\nimport { useSelectDotLottieState } from './hooks/use-select-dotlottie-state';\nimport { DotLottieProvider } from './providers';\n\nexport interface Props extends React.HTMLAttributes<HTMLDivElement> {\n  activeAnimationId?: string;\n  activeStateId?: string;\n  autoplay?: boolean;\n  background?: string;\n  className?: string;\n  defaultTheme?: string;\n  direction?: 1 | -1;\n  hover?: boolean;\n  intermission?: number;\n  light?: boolean;\n  loop?: number | boolean;\n  /** @deprecated Use `ref` instead. */\n  lottieRef?: React.Ref<DotLottieCommonPlayer>;\n  onEvent?: <T extends PlayerEvents>(name: T, params?: unknown) => void;\n  playMode?: PlayMode;\n  renderer?: 'svg' | 'canvas' | 'html';\n  rendererSettings?: RendererSettings;\n  speed?: number;\n  src: Record<string, unknown> | string;\n  testId?: string;\n  worker?: boolean;\n}\n\nconst styles: Record<string, React.CSSProperties> = {\n  animation: {\n    position: 'relative',\n    width: '100%',\n    height: '100%',\n  },\n  // With controls Users must import css\n  animationWithControls: {\n    position: 'relative',\n  },\n};\n\nexport const DotLottiePlayer = React.forwardRef<DotLottieCommonPlayer | null, Props>(\n  (\n    {\n      onEvent,\n      activeAnimationId,\n      autoplay,\n      background = 'transparent',\n      direction,\n      intermission,\n      loop,\n      playMode,\n      hover,\n      speed,\n      renderer = 'svg',\n      rendererSettings = {},\n      src,\n      className = '',\n      testId,\n      children,\n      defaultTheme,\n      light = false,\n      worker = false,\n      activeStateId,\n      lottieRef,\n      ...props\n    },\n    ref,\n  ) => {\n    const containerRef = useRef<DotLottieElement | null>(null);\n\n    const dotLottieCommonPlayer = useDotLottiePlayer(src, containerRef, {\n      renderer,\n      activeAnimationId,\n      rendererSettings: {\n        clearCanvas: true,\n        progressiveLoad: false,\n        hideOnTransparent: true,\n        ...rendererSettings,\n      },\n      hover,\n      loop,\n      direction,\n      speed,\n      intermission,\n      background,\n      playMode,\n      autoplay: hover ? false : autoplay,\n      testId,\n      defaultTheme,\n      light,\n      worker,\n      activeStateId,\n    });\n\n    const dotLottieCommonPlayerRef = useRef<DotLottieCommonPlayer>(dotLottieCommonPlayer);\n\n    dotLottieCommonPlayerRef.current = dotLottieCommonPlayer;\n\n    React.useImperativeHandle<DotLottieCommonPlayer, DotLottieCommonPlayer>(\n      ref,\n      () => {\n        return dotLottieCommonPlayer;\n      },\n      [dotLottieCommonPlayer],\n    );\n\n    React.useImperativeHandle<DotLottieCommonPlayer, DotLottieCommonPlayer>(\n      lottieRef,\n      () => {\n        return dotLottieCommonPlayer;\n      },\n      [dotLottieCommonPlayer],\n    );\n\n    const currentState = useSelectDotLottieState(dotLottieCommonPlayer, (state) => state.currentState);\n    const frame = useSelectDotLottieState(dotLottieCommonPlayer, (state) => state.frame);\n    const seeker = useSelectDotLottieState(dotLottieCommonPlayer, (state) => state.seeker);\n    const currentAnimationId = useSelectDotLottieState(dotLottieCommonPlayer, (state) => state.currentAnimationId);\n\n    /**\n     * Updating prop changes.\n     */\n    useUpdateEffect(() => {\n      if (typeof loop === 'undefined') {\n        dotLottieCommonPlayerRef.current.revertToManifestValues(['loop']);\n      } else {\n        dotLottieCommonPlayerRef.current.setLoop(loop);\n      }\n    }, [loop]);\n\n    useUpdateEffect(() => {\n      if ([PlayerState.Initial, PlayerState.Loading].includes(currentState)) return;\n\n      if (typeof autoplay === 'undefined') {\n        dotLottieCommonPlayerRef.current.revertToManifestValues(['autoplay']);\n      } else {\n        dotLottieCommonPlayerRef.current.setAutoplay(autoplay);\n      }\n    }, [autoplay]);\n\n    useUpdateEffect(() => {\n      if (typeof direction === 'undefined') {\n        dotLottieCommonPlayerRef.current.revertToManifestValues(['direction']);\n      } else {\n        dotLottieCommonPlayerRef.current.setDirection(direction);\n      }\n    }, [direction]);\n\n    useUpdateEffect(() => {\n      if (typeof speed === 'undefined') {\n        dotLottieCommonPlayerRef.current.revertToManifestValues(['speed']);\n      } else {\n        dotLottieCommonPlayerRef.current.setSpeed(speed);\n      }\n    }, [speed]);\n\n    useUpdateEffect(() => {\n      if (typeof playMode === 'undefined') {\n        dotLottieCommonPlayerRef.current.revertToManifestValues(['playMode']);\n      } else {\n        dotLottieCommonPlayerRef.current.setMode(playMode);\n      }\n    }, [playMode]);\n\n    useUpdateEffect(() => {\n      if (typeof hover === 'undefined') {\n        dotLottieCommonPlayerRef.current.revertToManifestValues(['hover']);\n      } else {\n        dotLottieCommonPlayerRef.current.setHover(hover);\n      }\n    }, [hover]);\n\n    useUpdateEffect(() => {\n      if (typeof background === 'undefined') {\n        dotLottieCommonPlayerRef.current.setBackground('transparent');\n      } else {\n        dotLottieCommonPlayerRef.current.setBackground(background);\n      }\n    }, [background]);\n\n    useUpdateEffect(() => {\n      if (typeof intermission === 'undefined') {\n        dotLottieCommonPlayerRef.current.revertToManifestValues(['intermission']);\n      } else {\n        dotLottieCommonPlayerRef.current.setIntermission(intermission);\n      }\n    }, [intermission]);\n\n    useUpdateEffect(() => {\n      if (typeof defaultTheme === 'undefined' || !defaultTheme) {\n        dotLottieCommonPlayerRef.current.revertToManifestValues(['defaultTheme']);\n      } else {\n        dotLottieCommonPlayerRef.current.setDefaultTheme(defaultTheme);\n      }\n    }, [defaultTheme]);\n\n    useUpdateEffect(() => {\n      if (activeAnimationId) {\n        dotLottieCommonPlayerRef.current.play(activeAnimationId);\n      }\n    }, [activeAnimationId]);\n\n    useUpdateEffect(() => {\n      if (typeof activeStateId !== 'undefined') {\n        dotLottieCommonPlayerRef.current.enterInteractiveMode(activeStateId);\n      }\n\n      return (): void => {\n        dotLottieCommonPlayerRef.current.exitInteractiveMode();\n      };\n    }, [activeStateId]);\n\n    useUpdateEffect(() => {\n      if (typeof src !== 'undefined') {\n        dotLottieCommonPlayerRef.current.updateSrc(src);\n      }\n    }, [src]);\n\n    /**\n     * Adding event listeners if dotLottieCommonPlayerRef.current? is available\n     */\n    useEffect(() => {\n      const onDOMLoaded = (): void => {\n        onEvent?.(PlayerEvents.Ready);\n      };\n      const onDataReady = (): void => {\n        onEvent?.(PlayerEvents.DataReady);\n      };\n      const onDataFailed = (): void => {\n        onEvent?.(PlayerEvents.DataFail);\n      };\n      const onComplete = (): void => {\n        if (dotLottieCommonPlayerRef.current.currentState !== PlayerState.Playing) {\n          onEvent?.(PlayerEvents.Complete);\n        }\n      };\n      const onLoopComplete = (): void => {\n        onEvent?.(PlayerEvents.LoopComplete);\n      };\n\n      dotLottieCommonPlayerRef.current.addEventListener('DOMLoaded', onDOMLoaded);\n      dotLottieCommonPlayerRef.current.addEventListener('data_ready', onDataReady);\n      dotLottieCommonPlayerRef.current.addEventListener('data_failed', onDataFailed);\n      dotLottieCommonPlayerRef.current.addEventListener('complete', onComplete);\n      dotLottieCommonPlayerRef.current.addEventListener('loopComplete', onLoopComplete);\n\n      return (): void => {\n        dotLottieCommonPlayerRef.current.removeEventListener('DOMLoaded', onDOMLoaded);\n        dotLottieCommonPlayerRef.current.removeEventListener('data_ready', onDataReady);\n        dotLottieCommonPlayerRef.current.removeEventListener('data_failed', onDataFailed);\n        dotLottieCommonPlayerRef.current.removeEventListener('complete', onComplete);\n        dotLottieCommonPlayerRef.current.removeEventListener('loopComplete', onLoopComplete);\n      };\n    }, []);\n\n    useEffect(() => {\n      switch (currentState) {\n        case PlayerState.Stopped:\n          onEvent?.(PlayerEvents.Stop);\n          break;\n\n        case PlayerState.Paused:\n          onEvent?.(PlayerEvents.Pause);\n          break;\n\n        case PlayerState.Playing:\n          onEvent?.(PlayerEvents.Play);\n          break;\n\n        case PlayerState.Frozen:\n          onEvent?.(PlayerEvents.Freeze);\n          break;\n\n        case PlayerState.Error:\n          onEvent?.(PlayerEvents.Error);\n          break;\n\n        default:\n          break;\n      }\n    }, [currentState]);\n\n    useEffect(() => {\n      onEvent?.(PlayerEvents.Frame, { frame, seeker });\n    }, [frame]);\n\n    return (\n      <DotLottieProvider value={dotLottieCommonPlayer}>\n        <div\n          className={`dotlottie-container main ${children ? 'controls' : ''} ${className}`}\n          lang=\"en\"\n          {...(testId && {\n            'data-testid': testId,\n          })}\n          {...props}\n        >\n          <div\n            ref={containerRef}\n            data-name={`${currentAnimationId}`}\n            role=\"figure\"\n            className={`animation ${children ? 'controls' : ''}`}\n            style={children ? styles.animationWithControls : styles.animation}\n            {...(testId && {\n              'data-testid': `animation`,\n            })}\n          >\n            {currentState === PlayerState.Error && (\n              <div\n                {...(testId && {\n                  'data-testid': `error`,\n                })}\n                className=\"error\"\n              >\n                ⚠️\n              </div>\n            )}\n          </div>\n          {children}\n        </div>\n      </DotLottieProvider>\n    );\n  },\n);\n","/**\n * Copyright 2023 Design Barn Inc.\n */\n\nimport type { DotLottieConfig, DotLottieElement, RendererType } from '@dotlottie/common';\nimport { DotLottieCommonPlayer } from '@dotlottie/common';\nimport type { MutableRefObject } from 'react';\nimport { useLayoutEffect, useRef, useState, useEffect } from 'react';\n\nexport const useIsomorphicLayoutEffect = typeof window === 'undefined' ? useEffect : useLayoutEffect;\n\nexport const useDotLottiePlayer = (\n  src: Record<string, unknown> | string,\n  containerRef: MutableRefObject<DotLottieElement | null>,\n  config?: DotLottieConfig<RendererType>,\n): DotLottieCommonPlayer => {\n  const [dotLottiePlayer] = useState(() => new DotLottieCommonPlayer(src, containerRef.current, config));\n\n  const loadedRef = useRef(false);\n\n  useIsomorphicLayoutEffect(() => {\n    async function load(): Promise<void> {\n      if (!loadedRef.current && containerRef.current) {\n        loadedRef.current = true;\n\n        dotLottiePlayer.setContainer(containerRef.current);\n\n        await dotLottiePlayer.load();\n      }\n    }\n\n    load();\n\n    return () => {\n      if (loadedRef.current) {\n        dotLottiePlayer.destroy();\n      }\n    };\n  }, [dotLottiePlayer]);\n\n  return dotLottiePlayer;\n};\n","/**\n * Copyright 2023 Design Barn Inc.\n */\n\nimport type { DotLottieCommonPlayer, DotLottiePlayerState } from '@dotlottie/common';\nimport { DEFAULT_STATE } from '@dotlottie/common';\nimport { useCallback } from 'react';\n\nimport { useSyncExternalStore } from './use-sync-external-store';\n\nexport type Unsubscribe = () => void;\nexport type Subscribe = (onStateChange: () => void) => Unsubscribe;\n\nexport function useSelectDotLottieState<T>(\n  dotLottiePlayer: DotLottieCommonPlayer,\n  selector: (state: DotLottiePlayerState) => T,\n): T {\n  const getSelection = useCallback(() => {\n    return selector(dotLottiePlayer.getState());\n  }, [selector, dotLottiePlayer]);\n\n  const subscribe = useCallback<Subscribe>(\n    (listener: () => void) => {\n      return dotLottiePlayer.state.subscribe(listener);\n    },\n    [dotLottiePlayer],\n  );\n\n  const getServerSnapshot = (): T => {\n    return selector(DEFAULT_STATE);\n  };\n\n  return useSyncExternalStore(subscribe, getSelection, getServerSnapshot);\n}\n"]}