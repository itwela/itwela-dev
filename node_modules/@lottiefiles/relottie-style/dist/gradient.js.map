{"version":3,"sources":["../src/gradient.ts"],"sourcesContent":["/**\n * Copyright 2023 Design Barn Inc.\n */\n\nimport type { ObjectNode } from '@lottiefiles/last';\nimport { colord, extend } from 'colord';\nimport namesPlugin from 'colord/plugins/names';\nimport { parse } from 'gradient-parser';\nimport { visit } from 'unist-util-visit';\n\nextend([namesPlugin]);\n\nexport const isLinearGradient = (value: string): boolean => {\n  try {\n    if (!value.startsWith('linear-gradient')) return false;\n\n    const nodes = parse(value);\n\n    if (nodes.length === 0) return false;\n\n    const gradientNode = nodes[0];\n\n    if (gradientNode?.type !== 'linear-gradient') return false;\n\n    return true;\n  } catch (err) {\n    return false;\n  }\n};\n\nexport const isRadialGradient = (value: string): boolean => {\n  try {\n    if (!value.startsWith('radial-gradient')) return false;\n\n    const nodes = parse(value);\n\n    if (nodes.length === 0) return false;\n\n    const gradientNode = nodes[0];\n\n    if (gradientNode?.type !== 'radial-gradient') return false;\n\n    return true;\n  } catch (err) {\n    return false;\n  }\n};\n\nexport const normalizeGradient = (value: string): number[] => {\n  const lottieGradient: number[] = [];\n\n  const alphaArray: number[] = [];\n\n  if (!(isLinearGradient(value) || isRadialGradient(value))) return [];\n\n  const nodes = parse(value);\n\n  const gradient = nodes[0];\n\n  gradient?.colorStops.forEach((colorStop, index) => {\n    const rgb: number[] = [];\n\n    let alpha: number = 0;\n\n    if (colorStop.type === 'hex' || colorStop.type === 'literal') {\n      const color = colord(colorStop.value);\n\n      rgb.push(\n        parseFloat((color.rgba.r / 255).toFixed(2)),\n        parseFloat((color.rgba.g / 255).toFixed(2)),\n        parseFloat((color.rgba.b / 255).toFixed(2)),\n      );\n\n      alpha = color.rgba.a;\n    } else if (['rgb', 'rgba'].includes(colorStop.type)) {\n      const color = colord({\n        r: Number(colorStop.value[0]),\n        g: Number(colorStop.value[1]),\n        b: Number(colorStop.value[2]),\n        a: colorStop.value[3] ? Number(colorStop.value[3]) : 1,\n      });\n\n      rgb.push(\n        parseFloat((color.rgba.r / 255).toFixed(2)),\n        parseFloat((color.rgba.g / 255).toFixed(2)),\n        parseFloat((color.rgba.b / 255).toFixed(2)),\n      );\n\n      alpha = color.rgba.a;\n    }\n\n    let position: number = parseFloat((index / (gradient.colorStops.length - 1 || 1)).toFixed(2));\n\n    if (colorStop.length?.value && Number(colorStop.length.value) > 0) {\n      position = parseFloat((Number(colorStop.length.value) / 100).toFixed(2));\n    }\n\n    lottieGradient.push(position, ...rgb);\n\n    alphaArray.push(position, alpha);\n  });\n\n  lottieGradient.push(...alphaArray);\n\n  return lottieGradient;\n};\n\nexport const applyGradient = (node: ObjectNode, gradient: number[], gradientType: 'radial' | 'linear'): void => {\n  if (!['shape-gradient-fill', 'shape-gradient-stroke'].includes(node.title)) return;\n\n  const count = gradient.length / 6;\n\n  visit(node, 'attribute', (attr) => {\n    if (attr.title === 'gradient-type' && attr.children[0]) {\n      attr.children[0].value = gradientType === 'linear' ? 1 : 2;\n    } else if (attr.title === 'count' && attr.children[0]) {\n      attr.children[0].value = count;\n    }\n  });\n\n  visit(node, 'collection', (collection) => {\n    if (\n      collection.title === 'static-values' &&\n      typeof collection.key === 'object' &&\n      collection.key.value === 'k' &&\n      collection.children[0]\n    ) {\n      const childNode = collection.children[0];\n\n      childNode.children = gradient.map((value) => ({\n        type: 'primitive',\n        valueType: 'number',\n        value,\n      }));\n    }\n  });\n};\n"],"mappings":";AAKA;AACA;AACA;AACA;AAEA,OAAO,CAAC,WAAW,CAAC;AAEb,IAAM,mBAAmB,CAAC,UAA2B;AAC1D,MAAI;AACF,QAAI,CAAC,MAAM,WAAW,iBAAiB;AAAG,aAAO;AAEjD,UAAM,QAAQ,MAAM,KAAK;AAEzB,QAAI,MAAM,WAAW;AAAG,aAAO;AAE/B,UAAM,eAAe,MAAM;AAE3B,QAAI,cAAc,SAAS;AAAmB,aAAO;AAErD,WAAO;AAAA,EACT,SAAS,KAAP;AACA,WAAO;AAAA,EACT;AACF;AAEO,IAAM,mBAAmB,CAAC,UAA2B;AAC1D,MAAI;AACF,QAAI,CAAC,MAAM,WAAW,iBAAiB;AAAG,aAAO;AAEjD,UAAM,QAAQ,MAAM,KAAK;AAEzB,QAAI,MAAM,WAAW;AAAG,aAAO;AAE/B,UAAM,eAAe,MAAM;AAE3B,QAAI,cAAc,SAAS;AAAmB,aAAO;AAErD,WAAO;AAAA,EACT,SAAS,KAAP;AACA,WAAO;AAAA,EACT;AACF;AAEO,IAAM,oBAAoB,CAAC,UAA4B;AAC5D,QAAM,iBAA2B,CAAC;AAElC,QAAM,aAAuB,CAAC;AAE9B,MAAI,CAAE,kBAAiB,KAAK,KAAK,iBAAiB,KAAK;AAAI,WAAO,CAAC;AAEnE,QAAM,QAAQ,MAAM,KAAK;AAEzB,QAAM,WAAW,MAAM;AAEvB,YAAU,WAAW,QAAQ,CAAC,WAAW,UAAU;AACjD,UAAM,MAAgB,CAAC;AAEvB,QAAI,QAAgB;AAEpB,QAAI,UAAU,SAAS,SAAS,UAAU,SAAS,WAAW;AAC5D,YAAM,QAAQ,OAAO,UAAU,KAAK;AAEpC,UAAI,KACF,WAAY,OAAM,KAAK,IAAI,KAAK,QAAQ,CAAC,CAAC,GAC1C,WAAY,OAAM,KAAK,IAAI,KAAK,QAAQ,CAAC,CAAC,GAC1C,WAAY,OAAM,KAAK,IAAI,KAAK,QAAQ,CAAC,CAAC,CAC5C;AAEA,cAAQ,MAAM,KAAK;AAAA,IACrB,WAAW,CAAC,OAAO,MAAM,EAAE,SAAS,UAAU,IAAI,GAAG;AACnD,YAAM,QAAQ,OAAO;AAAA,QACnB,GAAG,OAAO,UAAU,MAAM,EAAE;AAAA,QAC5B,GAAG,OAAO,UAAU,MAAM,EAAE;AAAA,QAC5B,GAAG,OAAO,UAAU,MAAM,EAAE;AAAA,QAC5B,GAAG,UAAU,MAAM,KAAK,OAAO,UAAU,MAAM,EAAE,IAAI;AAAA,MACvD,CAAC;AAED,UAAI,KACF,WAAY,OAAM,KAAK,IAAI,KAAK,QAAQ,CAAC,CAAC,GAC1C,WAAY,OAAM,KAAK,IAAI,KAAK,QAAQ,CAAC,CAAC,GAC1C,WAAY,OAAM,KAAK,IAAI,KAAK,QAAQ,CAAC,CAAC,CAC5C;AAEA,cAAQ,MAAM,KAAK;AAAA,IACrB;AAEA,QAAI,WAAmB,WAAY,SAAS,UAAS,WAAW,SAAS,KAAK,IAAI,QAAQ,CAAC,CAAC;AAE5F,QAAI,UAAU,QAAQ,SAAS,OAAO,UAAU,OAAO,KAAK,IAAI,GAAG;AACjE,iBAAW,WAAY,QAAO,UAAU,OAAO,KAAK,IAAI,KAAK,QAAQ,CAAC,CAAC;AAAA,IACzE;AAEA,mBAAe,KAAK,UAAU,GAAG,GAAG;AAEpC,eAAW,KAAK,UAAU,KAAK;AAAA,EACjC,CAAC;AAED,iBAAe,KAAK,GAAG,UAAU;AAEjC,SAAO;AACT;AAEO,IAAM,gBAAgB,CAAC,MAAkB,UAAoB,iBAA4C;AAC9G,MAAI,CAAC,CAAC,uBAAuB,uBAAuB,EAAE,SAAS,KAAK,KAAK;AAAG;AAE5E,QAAM,QAAQ,SAAS,SAAS;AAEhC,QAAM,MAAM,aAAa,CAAC,SAAS;AACjC,QAAI,KAAK,UAAU,mBAAmB,KAAK,SAAS,IAAI;AACtD,WAAK,SAAS,GAAG,QAAQ,iBAAiB,WAAW,IAAI;AAAA,IAC3D,WAAW,KAAK,UAAU,WAAW,KAAK,SAAS,IAAI;AACrD,WAAK,SAAS,GAAG,QAAQ;AAAA,IAC3B;AAAA,EACF,CAAC;AAED,QAAM,MAAM,cAAc,CAAC,eAAe;AACxC,QACE,WAAW,UAAU,mBACrB,OAAO,WAAW,QAAQ,YAC1B,WAAW,IAAI,UAAU,OACzB,WAAW,SAAS,IACpB;AACA,YAAM,YAAY,WAAW,SAAS;AAEtC,gBAAU,WAAW,SAAS,IAAI,CAAC,UAAW;AAAA,QAC5C,MAAM;AAAA,QACN,WAAW;AAAA,QACX;AAAA,MACF,EAAE;AAAA,IACJ;AAAA,EACF,CAAC;AACH;","names":[]}