{"version":3,"sources":["../src/style.ts","../src/gradient.ts"],"sourcesContent":["/**\n * Copyright 2023 Design Barn Inc.\n */\n\n/* eslint-disable padding-line-between-statements */\n\nimport type { ArrayNodeValue, ObjectNode, Root } from '@lottiefiles/last';\nimport { parse as parseLss } from '@lottiefiles/lottie-style-sheets';\nimport type { Declaration } from '@lottiefiles/lottie-style-sheets';\nimport { colord, extend } from 'colord';\nimport namesPlugin from 'colord/plugins/names';\n// eslint-disable-next-line import/no-namespace\nimport * as parsel from 'parsel-js';\nimport { parse as parseValue } from 'postcss-values-parser';\nimport type { Transformer, Plugin } from 'unified';\nimport type { VisitorResult } from 'unist-util-visit';\nimport { EXIT, visit, CONTINUE } from 'unist-util-visit';\n\nimport { applyGradient, isLinearGradient, isRadialGradient, normalizeGradient } from './gradient';\n\nextend([namesPlugin]);\n\nexport interface Options {\n  lss: string;\n}\n\ntype AttributeType = 'layer-xml-id' | 'css-class' | 'name' | 'layer-type' | 'shape-type';\ntype AttributeValue = string | number;\n\nconst findNodesByAttribute = (\n  nodeOrList: Root | ObjectNode | ObjectNode[],\n  value: AttributeValue,\n  type: AttributeType,\n  isOwnAttribute: boolean = false,\n): ObjectNode[] => {\n  const result = new Set<ObjectNode>();\n\n  const list = Array.isArray(nodeOrList) ? nodeOrList : [nodeOrList];\n\n  for (const node of list) {\n    visit(node, 'attribute', (attr, _, parent) => {\n      if (attr.title === type && attr.children[0]?.value === value && parent && parent.type !== 'root') {\n        if (isOwnAttribute) {\n          if (parent === node) {\n            result.add(parent);\n          }\n        } else {\n          result.add(parent);\n        }\n      }\n    });\n  }\n\n  return Array.from(result);\n};\n\nconst querySelectorAll = (root: Root, selectors: string[]): ObjectNode[] => {\n  const matchedNodes = [];\n\n  for (const selector of selectors) {\n    let result: ObjectNode[] = [];\n\n    const ast = parsel.parse(selector);\n\n    parsel.walk(ast, (node, parent) => {\n      const roots = result.length > 0 ? result : root;\n\n      if (node.type === 'id') {\n        const lastNodes = findNodesByAttribute(roots, node.name, 'layer-xml-id', parent?.type === 'compound');\n\n        result = lastNodes;\n      } else if (node.type === 'class') {\n        const lastNodes = findNodesByAttribute(roots, node.name, 'css-class', parent?.type === 'compound');\n\n        result = lastNodes;\n      } else if (node.type === 'type') {\n        let value: string | number = '';\n        let type: AttributeType | null = null;\n\n        if (node.name === 'FillShape') {\n          type = 'shape-type';\n          value = 'fl';\n        } else if (node.name === 'StrokeShape') {\n          type = 'shape-type';\n          value = 'st';\n        } else if (node.name === 'GradientFillShape') {\n          type = 'shape-type';\n          value = 'gf';\n        } else if (node.name === 'GradientStrokeShape') {\n          type = 'shape-type';\n          value = 'gs';\n        } else if (node.name === 'ShapeLayer') {\n          type = 'layer-type';\n          value = 4;\n        } else if (node.name === 'SolidColorLayer') {\n          type = 'layer-type';\n          value = 1;\n        } else if (node.name === 'ImageLayer') {\n          type = 'layer-type';\n          value = 2;\n        }\n\n        if (type && value) {\n          const lastNodes = findNodesByAttribute(roots, value, type);\n\n          result = lastNodes;\n        }\n      } else if (node.type === 'attribute') {\n        let type: AttributeType | null = null;\n        let value: string | number | undefined = node.value;\n\n        if (node.name === 'id') {\n          type = 'layer-xml-id';\n        } else if (node.name === 'class') {\n          type = 'css-class';\n        } else if (node.name === 'name') {\n          type = 'name';\n        } else if (node.name === 'shape-type') {\n          type = 'shape-type';\n        } else if (node.name === 'layer-type') {\n          type = 'layer-type';\n          value = Number(node.value);\n        }\n\n        if (type && value && ['number', 'string'].includes(typeof value)) {\n          const lastNodes = findNodesByAttribute(roots, value, type, parent?.type === 'compound');\n\n          result = lastNodes;\n        }\n      }\n    });\n\n    matchedNodes.push(...result);\n  }\n\n  return Array.from(new Set(matchedNodes));\n};\n\ntype RGBAColor = [number, number, number, number];\n\ninterface NormalizedStyles {\n  'fill-color'?: RGBAColor;\n  'fill-rule'?: 1 | 2;\n  hidden?: boolean;\n  'linear-gradient-fill-color'?: number[];\n  'linear-gradient-stroke-color'?: number[];\n  opacity?: number;\n  'radial-gradient-fill-color'?: number[];\n  'radial-gradient-stroke-color'?: number[];\n  src?: string;\n  'stroke-color'?: RGBAColor;\n  'stroke-width'?: number;\n}\n\nconst isColorProperty = (prop: string): boolean => {\n  return prop.includes('-color');\n};\n\nconst isValidFillRule = (value: string): boolean => {\n  return value === 'nonzero' || value === 'evenodd';\n};\n\nconst normalizeOpacity = (value: string): number => {\n  if (value.endsWith('%')) {\n    return parseFloat(value);\n  }\n\n  return parseFloat(value) * 100;\n};\n\nconst normalizeFillRule = (value: string): 1 | 2 => {\n  if (value === 'nonzero') {\n    return 1;\n  }\n\n  return 2;\n};\n\nconst isValidUrl = (value: string): boolean => {\n  try {\n    // eslint-disable-next-line no-new\n    new URL(value);\n  } catch (_) {\n    return false;\n  }\n\n  return true;\n};\n\nconst getSrcUrl = (value: string): string => {\n  const root = parseValue(value);\n\n  const nodes = root.nodes;\n\n  if (nodes.length === 1) {\n    const node = nodes[0];\n\n    if (node && node.type === 'func' && node.name === 'url') {\n      const nestedNodes = node.nodes;\n\n      if (nestedNodes.length === 1) {\n        const nestedNode = nestedNodes[0];\n\n        if (nestedNode && nestedNode.type === 'quoted') {\n          const content = nestedNode.contents;\n\n          return content;\n        }\n      }\n    }\n  }\n\n  return '';\n};\n\nconst normalizeStyles = (declarations: Declaration[]): NormalizedStyles => {\n  const styles: NormalizedStyles = {};\n\n  for (const declaration of declarations) {\n    if (isColorProperty(declaration.property) && colord(declaration.value).isValid()) {\n      const rgbaColor = colord(declaration.value).rgba;\n\n      const value: RGBAColor = [rgbaColor.r / 255, rgbaColor.g / 255, rgbaColor.b / 255, rgbaColor.a];\n\n      switch (declaration.property) {\n        case 'fill-color':\n          styles['fill-color'] = value;\n          break;\n\n        case 'stroke-color':\n          styles['stroke-color'] = value;\n          break;\n\n        default:\n          break;\n      }\n    } else if (isColorProperty(declaration.property) && isLinearGradient(declaration.value)) {\n      const value = normalizeGradient(declaration.value);\n\n      switch (declaration.property) {\n        case 'fill-color':\n          styles['linear-gradient-fill-color'] = value;\n          break;\n\n        case 'stroke-color':\n          styles['linear-gradient-stroke-color'] = value;\n          break;\n\n        default:\n          break;\n      }\n    } else if (isColorProperty(declaration.property) && isRadialGradient(declaration.value)) {\n      const value = normalizeGradient(declaration.value);\n\n      switch (declaration.property) {\n        case 'fill-color':\n          styles['radial-gradient-fill-color'] = value;\n          break;\n\n        case 'stroke-color':\n          styles['radial-gradient-stroke-color'] = value;\n          break;\n\n        default:\n          break;\n      }\n    } else if (declaration.property === 'stroke-width') {\n      styles['stroke-width'] = Number(declaration.value);\n    } else if (declaration.property === 'fill-rule' && isValidFillRule(declaration.value)) {\n      styles['fill-rule'] = normalizeFillRule(declaration.value);\n    } else if (declaration.property === 'opacity') {\n      const opacity = normalizeOpacity(declaration.value);\n\n      if (Number.isNaN(opacity)) {\n        continue;\n      }\n\n      if (opacity < 0) {\n        styles['opacity'] = 0;\n      } else if (opacity > 100) {\n        styles['opacity'] = 100;\n      } else {\n        styles['opacity'] = opacity;\n      }\n    } else if (declaration.property === 'visibility') {\n      styles['hidden'] = declaration.value === 'hidden';\n    } else if (declaration.property === 'src') {\n      const url = getSrcUrl(declaration.value);\n      if (isValidUrl(url)) {\n        styles['src'] = url;\n      }\n    }\n  }\n\n  return styles;\n};\n\nconst apply = (targetNode: ObjectNode, styles: NormalizedStyles, root: Root): void => {\n  // eslint-disable-next-line guard-for-in\n  for (const prop in styles) {\n    switch (prop) {\n      case 'fill-color':\n        const rgbaArray = styles[prop];\n\n        if (targetNode.title === 'shape-fill') {\n          if (Array.isArray(rgbaArray)) {\n            visit(targetNode, 'array', (node): VisitorResult => {\n              const title = node.title as string;\n\n              if (title === 'color-rgba-children' && node.children.length === 4) {\n                node.children = node.children.map((child, index) => ({\n                  ...child,\n                  value: rgbaArray[index],\n                })) as ArrayNodeValue[];\n\n                return EXIT;\n              }\n\n              return CONTINUE;\n            });\n          }\n        } else if (targetNode.title === 'layer-solid-color') {\n          visit(targetNode, 'attribute', (attr) => {\n            if (attr.title === 'hex-color' && attr.children[0]?.value && rgbaArray?.length === 4) {\n              const hex = colord({\n                r: rgbaArray[0] * 255,\n                g: rgbaArray[1] * 255,\n                b: rgbaArray[2] * 255,\n                a: rgbaArray[3],\n              }).toHex();\n\n              attr.children[0].value = hex;\n            }\n          });\n        }\n        break;\n\n      case 'stroke-color':\n        if (targetNode.title === 'shape-stroke') {\n          // eslint-disable-next-line @typescript-eslint/no-shadow\n          const rgbaArray = styles[prop];\n\n          if (Array.isArray(rgbaArray)) {\n            visit(targetNode, 'array', (node): VisitorResult => {\n              const title = node.title as string;\n\n              if (title === 'static-values-children' && node.children.length === 4) {\n                node.children = node.children.map((child, index) => ({\n                  ...child,\n                  value: rgbaArray[index],\n                })) as ArrayNodeValue[];\n\n                return EXIT;\n              }\n\n              return CONTINUE;\n            });\n          }\n        }\n        break;\n\n      case 'stroke-width':\n        if (targetNode.title === 'shape-stroke' || targetNode.title === 'shape-gradient-stroke') {\n          visit(targetNode, 'element', (node) => {\n            if (node.title === 'stroke-width') {\n              visit(node, 'attribute', (attr, _, parent) => {\n                if (\n                  attr.title === 'static-value' &&\n                  attr.children[0]?.value &&\n                  attr.children[0].valueType === 'number' &&\n                  parent?.title === 'animated-value-static'\n                ) {\n                  attr.children[0].value = styles[prop] as number;\n                }\n              });\n            }\n          });\n        }\n        break;\n\n      case 'fill-rule':\n        if (['shape-fill', 'shape-gradient-fill'].includes(targetNode.title)) {\n          visit(targetNode, 'attribute', (attr) => {\n            if (attr.title === 'fill-rule-value' && attr.children[0]?.value) {\n              attr.children[0].value = styles[prop] as number;\n            }\n          });\n        }\n        break;\n\n      case 'opacity':\n        if (['shape-stroke', 'shape-fill', 'shape-gradient-fill', 'shape-gradient-stroke'].includes(targetNode.title)) {\n          visit(targetNode, 'element', (node) => {\n            if (['stroke-opacity', 'opacity'].includes(node.title)) {\n              visit(node, 'attribute', (attr, _, parent) => {\n                if (\n                  attr.title === 'static-value' &&\n                  attr.children[0]?.value &&\n                  attr.children[0].valueType === 'number' &&\n                  parent?.title === 'animated-value-static'\n                ) {\n                  attr.children[0].value = styles[prop] as number;\n                }\n              });\n            }\n          });\n        }\n        break;\n\n      case 'hidden':\n        if (targetNode.title.includes('shape') || targetNode.title.includes('layer')) {\n          visit(targetNode, 'attribute', (attr) => {\n            if (attr.title === 'hidden' && attr.children[0]) {\n              attr.children[0].value = styles[prop] as boolean;\n            }\n          });\n        }\n\n        break;\n\n      case 'linear-gradient-fill-color':\n      case 'linear-gradient-stroke-color':\n        applyGradient(targetNode, styles[prop] as number[], 'linear');\n        break;\n      case 'radial-gradient-fill-color':\n      case 'radial-gradient-stroke-color':\n        applyGradient(targetNode, styles[prop] as number[], 'radial');\n        break;\n\n      case 'src':\n        if (targetNode.title === 'layer-image') {\n          const attr = targetNode.children.find((node) => node.title === 'image-id');\n          if (attr?.type === 'attribute') {\n            const imgId = attr.children[0]?.value;\n            visit(root, 'object', (object) => {\n              if (object.title === 'asset-image') {\n                const isSameImage = object.children.some(\n                  (node) =>\n                    node.title === 'id' && node.children[0]?.type === 'primitive' && node.children[0].value === imgId,\n                );\n                if (isSameImage) {\n                  visit(object, 'attribute', (attrNode) => {\n                    if (attrNode.title === 'embedded' && attrNode.children[0]) {\n                      attrNode.children[0].value = 0;\n                    } else if (attrNode.title === 'path' && attrNode.children[0]) {\n                      attrNode.children[0].value = '';\n                    } else if (attrNode.title === 'filename' && attrNode.children[0]) {\n                      attrNode.children[0].value = styles[prop] as string;\n                    }\n                  });\n                }\n              }\n            });\n          }\n        }\n        break;\n\n      default:\n        break;\n    }\n  }\n};\n\nconst relottieStyle: Plugin<[Options?], Root, Root> = (options: Options = { lss: '' }) => {\n  const transformer: Transformer<Root> = async (last: Root): Promise<void> => {\n    const lssast = parseLss(options.lss);\n\n    visit(lssast, 'rule', (node) => {\n      const lastNodes = querySelectorAll(last, node.selectors);\n      const styles = normalizeStyles(node.children);\n\n      for (const lastNode of lastNodes) {\n        apply(lastNode, styles, last);\n      }\n    });\n  };\n\n  return transformer;\n};\n\nexport default relottieStyle;\n","/**\n * Copyright 2023 Design Barn Inc.\n */\n\nimport type { ObjectNode } from '@lottiefiles/last';\nimport { colord, extend } from 'colord';\nimport namesPlugin from 'colord/plugins/names';\nimport { parse } from 'gradient-parser';\nimport { visit } from 'unist-util-visit';\n\nextend([namesPlugin]);\n\nexport const isLinearGradient = (value: string): boolean => {\n  try {\n    if (!value.startsWith('linear-gradient')) return false;\n\n    const nodes = parse(value);\n\n    if (nodes.length === 0) return false;\n\n    const gradientNode = nodes[0];\n\n    if (gradientNode?.type !== 'linear-gradient') return false;\n\n    return true;\n  } catch (err) {\n    return false;\n  }\n};\n\nexport const isRadialGradient = (value: string): boolean => {\n  try {\n    if (!value.startsWith('radial-gradient')) return false;\n\n    const nodes = parse(value);\n\n    if (nodes.length === 0) return false;\n\n    const gradientNode = nodes[0];\n\n    if (gradientNode?.type !== 'radial-gradient') return false;\n\n    return true;\n  } catch (err) {\n    return false;\n  }\n};\n\nexport const normalizeGradient = (value: string): number[] => {\n  const lottieGradient: number[] = [];\n\n  const alphaArray: number[] = [];\n\n  if (!(isLinearGradient(value) || isRadialGradient(value))) return [];\n\n  const nodes = parse(value);\n\n  const gradient = nodes[0];\n\n  gradient?.colorStops.forEach((colorStop, index) => {\n    const rgb: number[] = [];\n\n    let alpha: number = 0;\n\n    if (colorStop.type === 'hex' || colorStop.type === 'literal') {\n      const color = colord(colorStop.value);\n\n      rgb.push(\n        parseFloat((color.rgba.r / 255).toFixed(2)),\n        parseFloat((color.rgba.g / 255).toFixed(2)),\n        parseFloat((color.rgba.b / 255).toFixed(2)),\n      );\n\n      alpha = color.rgba.a;\n    } else if (['rgb', 'rgba'].includes(colorStop.type)) {\n      const color = colord({\n        r: Number(colorStop.value[0]),\n        g: Number(colorStop.value[1]),\n        b: Number(colorStop.value[2]),\n        a: colorStop.value[3] ? Number(colorStop.value[3]) : 1,\n      });\n\n      rgb.push(\n        parseFloat((color.rgba.r / 255).toFixed(2)),\n        parseFloat((color.rgba.g / 255).toFixed(2)),\n        parseFloat((color.rgba.b / 255).toFixed(2)),\n      );\n\n      alpha = color.rgba.a;\n    }\n\n    let position: number = parseFloat((index / (gradient.colorStops.length - 1 || 1)).toFixed(2));\n\n    if (colorStop.length?.value && Number(colorStop.length.value) > 0) {\n      position = parseFloat((Number(colorStop.length.value) / 100).toFixed(2));\n    }\n\n    lottieGradient.push(position, ...rgb);\n\n    alphaArray.push(position, alpha);\n  });\n\n  lottieGradient.push(...alphaArray);\n\n  return lottieGradient;\n};\n\nexport const applyGradient = (node: ObjectNode, gradient: number[], gradientType: 'radial' | 'linear'): void => {\n  if (!['shape-gradient-fill', 'shape-gradient-stroke'].includes(node.title)) return;\n\n  const count = gradient.length / 6;\n\n  visit(node, 'attribute', (attr) => {\n    if (attr.title === 'gradient-type' && attr.children[0]) {\n      attr.children[0].value = gradientType === 'linear' ? 1 : 2;\n    } else if (attr.title === 'count' && attr.children[0]) {\n      attr.children[0].value = count;\n    }\n  });\n\n  visit(node, 'collection', (collection) => {\n    if (\n      collection.title === 'static-values' &&\n      typeof collection.key === 'object' &&\n      collection.key.value === 'k' &&\n      collection.children[0]\n    ) {\n      const childNode = collection.children[0];\n\n      childNode.children = gradient.map((value) => ({\n        type: 'primitive',\n        valueType: 'number',\n        value,\n      }));\n    }\n  });\n};\n"],"mappings":"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","names":[]}