// src/helpers.ts
function evaluate(node) {
  const getObjectValue = (objectLikeNode) => {
    const objectValue = {};
    objectLikeNode.children.forEach((member) => {
      const key = typeof member.key === "string" ? member.key : member.key.value;
      const value = member.children[0];
      if (value) {
        objectValue[key] = evaluate(value);
      }
    });
    return objectValue;
  };
  switch (node.type) {
    case "primitive":
      switch (typeof node.value) {
        case "number":
          return node.value;
        case "string":
          return node.value;
        case "boolean":
          return node.value;
        case "object":
          return null;
        default:
          throw new Error(`Unknown Primitive type ${node.type}.`);
      }
    case "attribute":
      return node.children[0] ? evaluate(node.children[0]) : null;
    case "collection":
      return node.children[0] ? evaluate(node.children[0]) : null;
    case "element":
      return node.children[0] ? evaluate(node.children[0]) : null;
    case "array":
      return node.children.map(evaluate);
    case "root":
      return getObjectValue(node);
    case "object":
      return getObjectValue(node);
    default:
      throw new Error(`Unknown node type ${node.type}.`);
  }
}

// src/options.ts
var DEFAULT_OPTIONS = {
  indent: 0
};

// src/stringify.ts
function stringify(node, _file, settings = {}) {
  const options = { ...DEFAULT_OPTIONS, ...settings.stringify };
  const lottieJson = evaluate(node);
  return JSON.stringify(lottieJson, null, options.indent);
}

// src/unified-relottie-stringify.ts
var relottieStringify = function relottieStringify2(options = {}) {
  const settings = this.data("settings") || { stringify: {} };
  settings.stringify = { ...settings.stringify, ...options };
  const compiler = (tree, file) => {
    return stringify(tree, file, settings);
  };
  Object.assign(this, { Compiler: compiler });
};
var unified_relottie_stringify_default = relottieStringify;
export {
  DEFAULT_OPTIONS,
  unified_relottie_stringify_default as default,
  evaluate
};
//# sourceMappingURL=index.js.map