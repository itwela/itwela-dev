{"version":3,"sources":["../src/helpers.ts","../src/options.ts","../src/stringify.ts","../src/unified-relottie-stringify.ts"],"sourcesContent":["/**\n * Copyright 2023 Design Barn Inc.\n */\n\nimport type { NodeValue, Element, Collection, Attribute, Root, ObjectNode } from '@lottiefiles/last';\n\nexport type JSONValue = string | number | boolean | null | JSONObject | JSONArray;\n\nexport interface JSONObject {\n  [x: string]: JSONValue;\n}\n\nexport interface JSONArray extends Array<JSONValue> {}\n\n/**\n * Evaluates a Lottie AST node into a JavaScript value.\n * @returns The JavaScript value for the node.\n */\nexport function evaluate(node: NodeValue): JSONValue {\n  const getObjectValue = (objectLikeNode: Root | ObjectNode): JSONObject => {\n    const objectValue: JSONObject = {};\n\n    objectLikeNode.children.forEach((member: Element | Collection | Attribute) => {\n      const key = typeof member.key === 'string' ? member.key : member.key.value;\n\n      const value = member.children[0];\n\n      if (value) {\n        objectValue[key] = evaluate(value);\n      }\n    });\n\n    return objectValue;\n  };\n\n  switch (node.type) {\n    case 'primitive':\n      switch (typeof node.value) {\n        case 'number':\n          return node.value;\n\n        case 'string':\n          return node.value;\n\n        case 'boolean':\n          return node.value;\n\n        case 'object':\n          return null;\n\n        default:\n          throw new Error(`Unknown Primitive type ${node.type}.`);\n      }\n\n    case 'attribute':\n      return node.children[0] ? evaluate(node.children[0]) : null;\n\n    case 'collection':\n      return node.children[0] ? evaluate(node.children[0]) : null;\n\n    case 'element':\n      return node.children[0] ? evaluate(node.children[0]) : null;\n\n    case 'array':\n      return node.children.map(evaluate);\n\n    case 'root':\n      return getObjectValue(node);\n\n    case 'object':\n      return getObjectValue(node);\n\n    default:\n      throw new Error(`Unknown node type ${node.type}.`);\n  }\n}\n","/**\n * Copyright 2023 Design Barn Inc.\n */\n\nexport interface StringifyOptions {\n  /**\n   * Adds indentation, white space, and line break characters to the return-value Lottie JSON text to make it easier to read.\n   */\n  indent: number;\n}\n\nexport const DEFAULT_OPTIONS: StringifyOptions = {\n  indent: 0,\n} as const;\n","/**\n * Copyright 2023 Design Barn Inc.\n */\n\nimport type { Root } from '@lottiefiles/last';\nimport type { VFile, Data } from 'vfile';\n\nimport { evaluate } from './helpers.js';\nimport { DEFAULT_OPTIONS } from './options.js';\nimport type { StringifyOptions } from './options.js';\nimport type { SettingsOptions } from './unified-relottie-stringify';\n\nexport interface StringifyFileData extends Data {\n  stringify?: object;\n}\n\n/**\n * Converts a Lottie AST back into the LottieJSON\n * @returns The JSON representation of the Lottie AST.\n */\nexport function stringify(node: Root, _file: VFile, settings: SettingsOptions = {}): string {\n  const options: StringifyOptions = { ...DEFAULT_OPTIONS, ...settings.stringify };\n\n  const lottieJson = evaluate(node);\n\n  return JSON.stringify(lottieJson, null, options.indent);\n}\n","/**\n * Copyright 2022 Design Barn Inc.\n */\n\nimport type { Root } from '@lottiefiles/last';\nimport type { Plugin, CompilerFunction } from 'unified';\n\nimport type { StringifyOptions } from './options.js';\nimport type { StringifyFileData } from './stringify';\nimport { stringify } from './stringify.js';\n\nexport type Options = Partial<StringifyOptions>;\n\n/**\n * Include other plugins' options\n */\nexport interface SettingsOptions extends Record<string, unknown> {\n  stringify?: Options;\n}\n\nexport type FileData = Partial<StringifyFileData>;\n\nconst relottieStringify: Plugin<[Options?], Root, string> = function relottieStringify(options: Options = {}) {\n  const settings = (this.data('settings') || { stringify: {} }) as SettingsOptions;\n\n  settings.stringify = { ...settings.stringify, ...options };\n\n  const compiler: CompilerFunction<Root, string> = (tree: Root, file) => {\n    return stringify(tree, file, settings);\n  };\n\n  Object.assign(this, { Compiler: compiler });\n};\n\nexport default relottieStringify;\n"],"mappings":";AAkBO,kBAAkB,MAA4B;AACnD,QAAM,iBAAiB,CAAC,mBAAkD;AACxE,UAAM,cAA0B,CAAC;AAEjC,mBAAe,SAAS,QAAQ,CAAC,WAA6C;AAC5E,YAAM,MAAM,OAAO,OAAO,QAAQ,WAAW,OAAO,MAAM,OAAO,IAAI;AAErE,YAAM,QAAQ,OAAO,SAAS;AAE9B,UAAI,OAAO;AACT,oBAAY,OAAO,SAAS,KAAK;AAAA,MACnC;AAAA,IACF,CAAC;AAED,WAAO;AAAA,EACT;AAEA,UAAQ,KAAK;AAAA,SACN;AACH,cAAQ,OAAO,KAAK;AAAA,aACb;AACH,iBAAO,KAAK;AAAA,aAET;AACH,iBAAO,KAAK;AAAA,aAET;AACH,iBAAO,KAAK;AAAA,aAET;AACH,iBAAO;AAAA;AAGP,gBAAM,IAAI,MAAM,0BAA0B,KAAK,OAAO;AAAA;AAAA,SAGvD;AACH,aAAO,KAAK,SAAS,KAAK,SAAS,KAAK,SAAS,EAAE,IAAI;AAAA,SAEpD;AACH,aAAO,KAAK,SAAS,KAAK,SAAS,KAAK,SAAS,EAAE,IAAI;AAAA,SAEpD;AACH,aAAO,KAAK,SAAS,KAAK,SAAS,KAAK,SAAS,EAAE,IAAI;AAAA,SAEpD;AACH,aAAO,KAAK,SAAS,IAAI,QAAQ;AAAA,SAE9B;AACH,aAAO,eAAe,IAAI;AAAA,SAEvB;AACH,aAAO,eAAe,IAAI;AAAA;AAG1B,YAAM,IAAI,MAAM,qBAAqB,KAAK,OAAO;AAAA;AAEvD;;;AChEO,IAAM,kBAAoC;AAAA,EAC/C,QAAQ;AACV;;;ACOO,mBAAmB,MAAY,OAAc,WAA4B,CAAC,GAAW;AAC1F,QAAM,UAA4B,EAAE,GAAG,iBAAiB,GAAG,SAAS,UAAU;AAE9E,QAAM,aAAa,SAAS,IAAI;AAEhC,SAAO,KAAK,UAAU,YAAY,MAAM,QAAQ,MAAM;AACxD;;;ACJA,IAAM,oBAAsD,4BAA2B,UAAmB,CAAC,GAAG;AAC5G,QAAM,WAAY,KAAK,KAAK,UAAU,KAAK,EAAE,WAAW,CAAC,EAAE;AAE3D,WAAS,YAAY,EAAE,GAAG,SAAS,WAAW,GAAG,QAAQ;AAEzD,QAAM,WAA2C,CAAC,MAAY,SAAS;AACrE,WAAO,UAAU,MAAM,MAAM,QAAQ;AAAA,EACvC;AAEA,SAAO,OAAO,MAAM,EAAE,UAAU,SAAS,CAAC;AAC5C;AAEA,IAAO,qCAAQ;","names":[]}